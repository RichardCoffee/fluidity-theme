includes/search.php:4:  function fluid_search_page_title() {
includes/search.php:19:  function fluid_search_page_afterposts() { ?>
includes/search.php:27:  function fluid_search_page_noposts() {
includes/galleryview.php:6:		function tcc_register_galleryview() {
includes/galleryview.php:18:		function tcc_enqueue_galleryview($query) {
includes/widgets.php:4:   function tcc_register_widgets() {
includes/widgets.php:16:function fluid_sidebar_admin_setup() {
includes/widgets.php:21:function fluid_widgets_admin_page() {
includes/widgets.php:26:function fluid_sidebar_admin_page() {
includes/index.php:8:function fluid_index_page($page='index') { ?>
includes/library.php:5:  function tcc_apply_clearfix($args) {
includes/library.php:18:  function tcc_bootstrap_css($args) {
includes/library.php:31:  function tcc_browser_body_class($classes) { // FIXME:  Ummm, no.  check user-agent string instead
includes/library.php:48:  function container_type($location='post') {
includes/library.php:62:  function convert_user_meta($ID) {
includes/library.php:74:  function fluid_get_post_terms($post_id,$taxonomy,$args) {
includes/library.php:90:  function wp_menu_id_by_name($name) {
includes/library.php:102:	function esc_attr_ex( $text, $context, $domain = 'default' ) {
includes/library.php:108:	function esc_html_ex( $text, $context, $domain = 'default' ) {
includes/library.php:115:  function author_role_template( $templates = '' ) {
includes/library.php:138:	function get_featured_url($postID=null) {
includes/library.php:152:  function get_term_name($tax,$slug) {
includes/library.php:161:  function get_valid_gravatar($email,$size=96) {
includes/library.php:177:	function is_ajax() {
includes/library.php:184:  function page_exists($search='') {
includes/library.php:195:  function sanitize_array($array,$method='title') {
includes/library.php:216:  function array_insert_after($array, $key, $new_key, $new_value) {
includes/library.php:235:  function debug_calling_function($depth=1) {
includes/library.php:249:  function debug_rewrite_rules() {
includes/library.php:270:  function list_filter_hooks( $hook = '' ) {
includes/library.php:309:  function list_template_conditions() {
includes/library.php:351:  function log_entry() {
includes/library.php:375:  function showme($title,$data) {
includes/library.php:397:  function tellme($string) {
includes/library.php:406:  function who_am_i($pos=0) {
includes/parallax.php:5:	function tcc_excerpt_parallax() {
includes/parallax.php:19:	function tcc_page_parallax($page) {
includes/parallax.php:41:	function tcc_post_parallax($css='single-parallax') {
includes/layout.php:9:  function fluid_layout() {
includes/layout.php:23:  function sidebar_layout($sidebar='standard',$side=null) {
includes/in-the-loop.php:11:  function fluid_content_slug($page='single') {
includes/in-the-loop.php:23:  function fluid_edit_post_link($separator=' ') {
includes/in-the-loop.php:40:	function fluid_navigation($taxonomy='',$all_links=false) {
includes/in-the-loop.php:80:  function fluid_next_post_exists() {
includes/in-the-loop.php:87:  function fluid_post_date($complete=false) {
includes/in-the-loop.php:117:	function fluid_postmetadata() { ?>
includes/in-the-loop.php:142:  function fluid_post_separator($slug) {
includes/in-the-loop.php:155:	function fluid_thumbnail() {
includes/in-the-loop.php:168:	function fluid_title($length=0) {
includes/in-the-loop.php:190:  function get_the_author_posts_link($authorID=0) {
includes/in-the-loop.php:203:	function tcc_excerpt_parallax() { ?>
includes/in-the-loop.php:218:	function tcc_post_parallax($css='single-parallax') {
includes/in-the-loop.php:233:	function tcc_post_title($max=0,$anchor=true) {
includes/login.php:8:  function tcc_admin_login_redirect($redirect_to,$request,$user) {
includes/login.php:23:  function tcc_dashboard_logo() {
includes/login.php:36:  function tcc_login_css() {
includes/login.php:48:  function tcc_login_header_url() {
includes/login.php:55:  function tcc_login_header_title() {
includes/login.php:63:  function tcc_remember_me() {
includes/login.php:65:      function tcc_remember_me_checked() {
includes/login.php:76:  function remove_lostpassword_text($text) {
includes/login.php:85:  function tcc_login_form($navbar=false,$right=false) {
includes/login.php:127:  function tcc_logout_url($url, $redirect) {
includes/archive.php:3:function fluid_archive_page_title() {
includes/pages.php:9:  function fluid_archive_page_title() { ?>
includes/pages.php:15:  function fluid_archive_page_noposts() {
includes/pages.php:22:  function fluid_category_page_title() { ?>
includes/pages.php:28:  function fluid_category_page_noposts() {
includes/pages.php:35:  function fluid_noposts_page($text) { ?>
includes/pages.php:47:	function fluid_save_page_template( $template ) {
includes/pages.php:56:  function get_page_slug() {
includes/pages.php:74:	function get_page_title($slug) {
includes/pages.php:80:	function tcc_get_page_id_by_slug($slug,$prop='ID') {
includes/pages.php:100:	function tcc_page_title($slug) { ?>
includes/pages.php:116:	function tcc_page_parallax($page) {
includes/menus.php:12:  function tcc_register_nav_menu() {
includes/loader.php:3:function fluidity_class_loader( $class ) {
includes/comments.php:9:  function fluid_comment_navigation() {
includes/comments.php:29:  function fluid_list_comments($comment,$args,$depth) {
includes/sidebars.php:6:  function fluidity_register_sidebars() {
includes/sidebars.php:66:function fluidity_the_widget($widget,$instance,$args) {
includes/sidebars.php:73:  function fluidity_get_sidebar($sidebar='standard') {
includes/sidebars.php:79:  function fluidity_load_sidebar($args,$force=false) {
includes/sidebars.php:93:  function fluidity_sidebar_parameter() {
includes/sidebars.php:107:  function fluidity_sidebar_layout($sidebar='standard',$side='') {
includes/third-party.php:19:  function fluidity_jetpack_site_logo_to_bootstrap($html) {
includes/third-party.php:40:  function has_woocommerce() {
includes/third-party.php:51:    function woocommerce_and_jetpack_sharedaddy() { ?>
includes/third-party.php:62:  function fluidity_wpfai_social() {
includes/footer.php:10:  function fluid_copyright_dates() {
includes/footer.php:26:  function fluid_footer_autohide() {
includes/footer.php:46:	function tcc_copyright($banner=true) { ?>
includes/collective.php:9:function collective_color_scheme($color) {
includes/collective.php:14:function collective_header() { ?>
includes/collective.php:26:function collective_enqueue() {
includes/collective.php:31:function collective_container_type($css) {
includes/collective.php:41:function collective_sidebars($sidebars) {
includes/options.php:9:  function stop_heartbeat() {
includes/options.php:28:  function tcc_currency_symbol() {
includes/options.php:36:  function tcc_design($option) {
includes/options.php:45:  function tcc_font_size() {
includes/options.php:55:  function tcc_layout($option) {
includes/options.php:64:  function tcc_option($option='',$section='') {
includes/options.php:92:  function tcc_settings($option) {
includes/misc.php:4:function contextual_static_front_page_section($wp_customize) {
includes/misc.php:10:function fluid_read_more_link($output) {
includes/misc.php:20:  function fluidity_social_icons() {
includes/misc.php:60:  function fluid_user_profile_link() {
includes/misc.php:74:  function single_search_result() {
includes/header.php:12:  function fluid_browser_body_class($classes) {
includes/header.php:30:  function fluid_browser_title($title) {
includes/header.php:49:  function tcc_custom_css() { ?>
includes/header.php:58:  function fluidity_header_logo() {
includes/header.php:87:  function fluidity_menubar_print_button() {
includes/colors.php:4:	function fluid_color_body_class($classes) {
includes/colors.php:15:  function fluid_color_scheme() {
includes/colors.php:24:  function tcc_color_scheme($location='') {
includes/colors.php:44:function tcc_custom_colors() {
includes/colors.php:55:	function tcc_parallax() {
includes/theme-support.php:59:    function tcc_editor_styles() {
includes/theme-support.php:67:	function tcc_post_revisions() {
functions.php:47:  function tcc_enqueue() {
functions.php:101:  function fluidity_admin_enqueue() {
functions.php:110:  function fluidity_register_bootstrap() {
functions.php:116:  function fluidity_bootstrap_backup() {
functions.php:123:  function fluidity_register_fontawesome() {
functions.php:129:  function fluidity_register_color_scheme() {
functions.php:138:  function fluidity_show_query( $args, $template, $slug='' ) {
scss/bootstrap/_component-animations.scss:36:  @include transition-timing-function(ease);
scss/bootstrap/mixins/_vendor-prefixes.scss:32:@mixin animation-timing-function($timing-function) {
scss/bootstrap/mixins/_vendor-prefixes.scss:33:  -webkit-animation-timing-function: $timing-function;
scss/bootstrap/mixins/_vendor-prefixes.scss:34:          animation-timing-function: $timing-function;
scss/bootstrap/mixins/_vendor-prefixes.scss:202:@mixin transition-timing-function($timing-function) {
scss/bootstrap/mixins/_vendor-prefixes.scss:203:  -webkit-transition-timing-function: $timing-function;
scss/bootstrap/mixins/_vendor-prefixes.scss:204:          transition-timing-function: $timing-function;
scss/bootstrap/_variables.scss:36://** Link hover color set via `darken()` function.
scss/colors/_functions.scss:4:@function color($key) {
scss/colors/_color_template.scss:5:@import "functions";
Binary file scss/.sass-cache/190188c4b665b1910809b566e3467839d4b4d70a/_vendor-prefixes.scssc matches
Binary file scss/.sass-cache/b8ff4425e691dc9d3fc8a683bdfd8951428afe6a/_component-animations.scssc matches
Binary file scss/.sass-cache/b8ff4425e691dc9d3fc8a683bdfd8951428afe6a/_variables.scssc matches
actions_filters.txt:9: tcc_enqueue                  enqueue front-end styles/scripts                  fluid_enqueue              functions.php
js/header-reduce.js:1:jQuery(window).scroll(function() {
js/slug_noedit.js:2:jQuery(document).ready(function() {
js/admin-form.js:3:jQuery(document).ready(function() {
js/admin-form.js:9:  jQuery('.form-image'       ).click(function(e) { imageUploader(this,e); });
js/admin-form.js:10:  jQuery('.form-image-delete').click(function(e) { imageDelete(this); });
js/admin-form.js:13:function showhideElements(els) {
js/admin-form.js:14:  jQuery(els).each(function(el) {
js/admin-form.js:28:function imageDelete(el) {
js/admin-form.js:40:function imageUploader(el,e) {
js/admin-form.js:50:  custom_uploader.on('select', function() {
js/admin-form.js:65:function showhidePosi(el,target,show) {
js/admin-form.js:75:function showhideAdminElements(el,target,show) {
js/admin-form.js:83:// Browser compatibility function taken from http://stackoverflow.com/questions/6548748/portability-of-nextelementsibling-nextsibling
js/admin-form.js:84:// the jquery .next() function is not reliable under certain circumstances - ie: when the DOM element has been dynamically added
js/admin-form.js:85:function nextElementSibling(el) {
js/header-fixed.js:2:jQuery(document).ready(function (){
js/skip-link-focus-fix.js:8:( function() {
js/skip-link-focus-fix.js:14:		window.addEventListener( 'hashchange', function() {
js/autohide.js:17://jQuery(document).ready(function() {
js/autohide.js:21:jQuery(window).scroll(function(event){
js/autohide.js:25:setInterval(function() {
js/autohide.js:32:function hasScrolled() {
js/autohide.js:42:      .hover(function() {
js/galleryview.js:2:jQuery(document).ready(function() {
js/autocomplete.js:2:jQuery(document).ready(function ($){
js/autocomplete.js:6:		source: function(req, response){
js/autocomplete.js:9:		select: function(event, ui) {
js/collapse.js:7:jQuery(document).ready(function() {
js/collapse.js:12:function assignCollapse(elID) { // Attach toggle event to collapsible areas
js/collapse.js:15:  jQuery(el).find('.panel-heading').each(function() {
js/collapse.js:18:    this.onclick = function() { clickCollapse(this); }
js/collapse.js:22:function clickCollapse(el) {
js/reduce.js:1:jQuery(window).scroll(function() {
js/library.js:3:jQuery(document).ready(function() {
js/library.js:8:function appendElement(elParent,elType,elId,elName,elClass,elIType) {
js/library.js:24:function deleteRoutine(deleteNode,stopID,deletion) {
js/library.js:35:function findData(myEle,findMe) {
js/library.js:48:function insertElement(elParent,elSpot,elType,elId,elName,elClass) {
js/library.js:63:// Browser compatibility function taken from http://stackoverflow.com/questions/6548748/portability-of-nextelementsibling-nextsibling
js/library.js:64:function nextElementSibling(el) {
js/library.js:70:// Browser compatibility function taken from http://stackoverflow.com/questions/6548748/portability-of-nextelementsibling-nextsibling
js/library.js:71:function previousElementSibling(el) {
js/library.js:78:function scrollToElement(selector, time, verticalOffset) {
js/navigation.js:7:( function() {
js/navigation.js:33:	button.onclick = function() {
js/navigation.js:63:	function toggleFocus() {
js/navigation.js:85:	( function( container ) {
js/navigation.js:90:			touchStartFn = function( e ) {
Binary file js/.header.js.swp matches
js/sprintf.js:4: * printf function (modifiers and argument types "p" and "n" are not supported
js/sprintf.js:10: * Terms of use: This function can be used free of charge IF this header is not
js/sprintf.js:11: * modified and remains with the function code.
js/sprintf.js:16:function sprintf(fstring){
js/sprintf.js:17:    var pad = function(str, ch, len){
js/sprintf.js:23:    var processFlags = function(flags, width, rs, arg){
js/sprintf.js:24:        var pn = function(flags, arg, rs){
js/sprintf.js:55:    converters['c'] = function(flags, width, precision, arg){
js/sprintf.js:62:    converters['d'] = function(flags, width, precision, arg){
js/sprintf.js:65:    converters['u'] = function(flags, width, precision, arg){
js/sprintf.js:68:    converters['i'] = function(flags, width, precision, arg){
js/sprintf.js:75:    converters['E'] = function(flags, width, precision, arg){
js/sprintf.js:78:    converters['e'] = function(flags, width, precision, arg){
js/sprintf.js:87:    converters['f'] = function(flags, width, precision, arg){
js/sprintf.js:96:    converters['G'] = function(flags, width, precision, arg){
js/sprintf.js:99:    converters['g'] = function(flags, width, precision, arg){
js/sprintf.js:117:    converters['o'] = function(flags, width, precision, arg){
js/sprintf.js:126:    converters['X'] = function(flags, width, precision, arg){
js/sprintf.js:129:    converters['x'] = function(flags, width, precision, arg){
js/sprintf.js:139:    converters['s'] = function(flags, width, precision, arg){
Binary file js/.skip-link-focus-fix.js.swp matches
js/tax_nodelete.js:2:jQuery(document).ready(function() {
js/scrolleffects.js:1:$(window).scroll(function() {
js/scrolleffects.js:14:$(function(){
js/scrolleffects.js:21:	$window.on("mousewheel DOMMouseScroll", function(event){
js/scrolleffects.js:31:				ease: Power1.easeOut,	//For more easing functions see http://api.greensock.com/js/com/greensock/easing/package-detail.html
js/scrolleffects.js:42:function update(){ 
js/scrolleffects.js:46:    $('.w-scroll').each(function() { 
classes/widgets.php:10:  function __construct($slug='',$title='',$desc=array()) {
classes/widgets.php:15:  public function widget($args,$instance) {
classes/widgets.php:28:  public function form($instance) {
classes/widgets.php:32:	protected function form_title($instance) {
classes/widgets.php:38:	protected function form_field($instance,$slug,$text) {
classes/widgets.php:50:	protected function form_checkbox($instance,$slug,$text) {
classes/widgets.php:62:  public function update($new,$old) {
classes/widgets.php:74:	function __construct() {
classes/widgets.php:87:	public function inner_widget($args,$instance) { ?>
classes/widgets.php:120:	public function form($instance) {
classes/widgets.php:128:	public function update($new,$old) {
classes/widgets.php:142:  function __construct() {
classes/widgets.php:149:  public function inner_widget($args,$instance) {
classes/widgets.php:157:  function __construct() {
classes/widgets.php:164:  public function inner_widget($args,$instance) {
classes/widgets.php:175:  function __construct() {
classes/widgets.php:183:  public function inner_widget($args,$instance) {
classes/widgets.php:191:function tcc_register_widgets() {
classes/Options/Social.php:8:  public function __construct() {
classes/Options/Social.php:12:  public function form_layout($form) {
classes/Options/Social.php:20:  public function describe_social() {
classes/Options/Social.php:24:  public function social_layout() {
classes/Options/Design.php:8:  public function __construct() {
classes/Options/Design.php:13:  private function form_title() {
classes/Options/Design.php:17:  public function form_layout($form) {
classes/Options/Design.php:25:  public function describe_options() { ?>
classes/Options/Design.php:31:  protected function options_layout() {
classes/Options/Design.php:82:  public function options_customize_register($wp_customize, TCC_Options_Fluidity $form) {
classes/Options/Fluidity.php:8:  public function form_trans_text($text,$orig) {
classes/Options/Fluidity.php:14:  protected function __construct() {
classes/Options/Fluidity.php:28:  public static function get_instance() {
classes/Options/Fluidity.php:33:  public function add_menu_option() {
classes/Options/Fluidity.php:58: *          describe: (string) name of the function to display the description text
classes/Options/Fluidity.php:67:  protected function form_layout($section='') {
classes/Options/Fluidity.php:92: *                               This string is interpreted as a function call, prefixed with 'render_'
classes/Options/Fluidity.php:93: *                               The rendering function is passed one parameter, an associative array, like so:
classes/Options/Fluidity.php:98: *                               functionality for this is only partially implemented.
classes/Options/Fluidity.php:103: *                   (string)  Name of the function that returns the select options (render: select)
classes/Options/Fluidity.php:105: *                   (string)  Suffix name of the wp_dropdown_* function (render:  wp_dropdown)
classes/Options/Fluidity.php:114: *                               This array will be passed to the called function.
classes/Options/Fluidity.php:119: *                             The layout array is passed to the rendering function.
classes/Options/Fluidity.php:122:  private function about_options_layout() {
classes/Options/Fluidity.php:163:  public function describe_about() {
classes/Options/Fluidity.php:173:  protected function options_layout($section) {
classes/Options/Fluidity.php:182:  protected function get_options_layout($section) {
classes/Options/Fluidity.php:186:  protected function create_file_select($slug='',$base='',$full=false) {
classes/Options/Fluidity.php:214:  private static function get_descript($fh) {
classes/Options/Fluidity.php:225:  protected static function create_select_layout($data,$text) {
classes/Options/Settings.php:7:  public function __construct() {
classes/Options/Settings.php:11:  private function form_title() {
classes/Options/Settings.php:15:  public function form_layout($form) {
classes/Options/Settings.php:23:  public function describe_options() {
classes/Options/Settings.php:27:  protected function options_layout() {
classes/Options/Typography.php:13:  public static function os_fonts() {
classes/Options/Typography.php:26:  public static function os_fonts_filter($fonts) {
classes/Options/Typography.php:39:  public static function google_fonts() {
classes/Options/Typography.php:60:  public static function google_fonts_filter($fonts) {
classes/Options/Typography.php:82:  public static function mixed_fonts() {
classes/Options/Typography.php:88:  public static function load_google_font() {
classes/Options/Typography.php:110:  public static function typography_styles() {
classes/Options/Images.php:8:  public function __construct() {
classes/Options/Images.php:13:  private function form_title() {
classes/Options/Images.php:17:  public function form_layout($form) {
classes/Options/Images.php:25:  public function describe_options() {
classes/Options/Images.php:29:  protected function options_layout() {
classes/Options/Images.php:91:  public function options_customize_register($wp_customize, TCC_Options_Fluidity $form) {
classes/Options/Layout.php:10:  public function __construct() {
classes/Options/Layout.php:15:  private function form_title() {
classes/Options/Layout.php:19:  public function form_layout($form) {
classes/Options/Layout.php:27:  public function describe_options() {
classes/Options/Layout.php:31:  protected function options_layout() {
classes/Options/Layout.php:84:  public function options_customize_register($wp_customize, TCC_Options_Fluidity $form) {
classes/Options/Parallax.php:8:  public function __construct() {
classes/Options/Parallax.php:13:  private function form_title() {
classes/Options/Parallax.php:17:  public function form_layout($form) {
classes/Options/Parallax.php:25:  public function describe_options() { ?>
classes/Options/Parallax.php:31:  protected function options_layout() {
classes/Options/Parallax.php:51:  public function options_customize_register($wp_customize, TCC_Options_Fluidity $form) {
classes/Options/Field.php:17:  public function __construct($args) {
classes/Options/Field.php:26:  public function register_fields() {
classes/Options/Field.php:41:  public function field_html() {
classes/pagetemplater.php:8:Notes: 02/06/15 - Added add_project_template() function to allow templates to be added dynamically
classes/pagetemplater.php:19:  public static function get_instance() {
classes/pagetemplater.php:26:  private function __construct() {
classes/pagetemplater.php:35:  public function add_project_template($slug,$desc,$path) {
classes/pagetemplater.php:42:  public function register_project_templates($atts) {
classes/pagetemplater.php:56:  public function view_project_template($template) {
classes/form-fields.php:11:  protected $callback = 'input';    # function to display field
classes/form-fields.php:25:  public function __construct($args) {
classes/form-fields.php:33:  public function input($label=true) {
classes/form-fields.php:47:  protected function label() {
classes/form-fields.php:62:  public function __construct($args) {
classes/form-fields.php:70:  public function register_field() {
classes/form-fields.php:78:  public function input($label=false) {
classes/form-fields.php:86:  public function __construct($args) {
classes/microdata.php:26:if (!function_exists('microdata')) {
classes/microdata.php:27:  function microdata() {
classes/microdata.php:38:  private function __construct() {
classes/microdata.php:42:  public static function get_instance() {
classes/microdata.php:50:  *  These functions should be inserted into elements like so:
classes/microdata.php:72:  public function __call($name,$arguments) {
classes/microdata.php:76:  public function microdata($type) {
classes/microdata.php:81:  public function about()    { $this->AboutPage(); }              // CreativeWork > WebPage > AboutPage
classes/microdata.php:82:  public function address()  { $this->PostalAddress(); }          // descendant of many types - see itemtype link
classes/microdata.php:83:  public function agent()    { $this->RealEstateAgent(); }        // Organization|Place > LocalBusiness > RealEstateAgent
classes/microdata.php:84:  public function company()  { $this->Organization(); }           // first tier type
classes/microdata.php:85:  public function contact()  { $this->ContactPage(); }            // CreativeWork > WebPage > ContactPage
classes/microdata.php:86:  public function element()  { $this->WebPageElement(); }         // CreativeWork > WebPage > WebPageElement
classes/microdata.php:87:  public function footer()   { $this->WPFooter(); }               // CreativeWork > WebPage > WebPageElement > WPFooter
classes/microdata.php:88:  public function group()    { $this->Organization(); }           // first tier type
classes/microdata.php:89:  public function header()   { $this->WPHeader(); }               // CreativeWork > WebPage > WebPageElement > WPHeader
classes/microdata.php:90:  public function item()     { $this->ItemPage(); }               // CreativeWork > WebPage > ItemPage
classes/microdata.php:91:  public function navigate() { $this->SiteNavigationElement(); }  // CreativeWork > WebPage > WebPageElement > SiteNavigationElement
classes/microdata.php:92:  public function page()     { $this->WebPage(); }                // CreativeWork > WebPage
classes/microdata.php:93:  public function post()     { $this->BlogPosting(); }            // CreativeWork > Blog > BlogPosting
classes/microdata.php:94:  public function profile()  { $this->ProfilePage(); }            // CreativeWork > WebPage > ProfilePage
classes/microdata.php:95:  public function search()   { $this->SearchResultsPage(); }      // CreativeWork > WebPage > SearchResultsPage
classes/microdata.php:96:  public function sidebar()  { $this->WPSideBar(); }              // CreativeWork > WebPage > WebPageElement > WPSideBar
classes/microdata.php:98:  public function BlogPosting() { // CreativeWork > Blog > BlogPosting
classes/microdata.php:102:  public function PostalAddress() { // descendant of many types - see itemtype link
classes/microdata.php:108:  *  These functions can be utilized like so:
classes/microdata.php:115:  public function bloginfo($show,$filter='raw') {
classes/microdata.php:122:  public function get_bloginfo($show,$filter='raw') {
classes/microdata.php:129:  public function get_the_author($addlink=false) {
classes/microdata.php:151:  private function filters() {
classes/microdata.php:175:  public function comments_popup_link_attributes($attr) {
classes/microdata.php:179:  public function comment_reply_link($link) {
classes/microdata.php:185:  public function get_archives_link($link) {
classes/microdata.php:193:  public function get_avatar($avatar) {
classes/microdata.php:200:  public function get_comment_author_link($link) {
classes/microdata.php:209:  public function get_comment_author_url_link($link) {
classes/microdata.php:216:  public function get_post_time($time,$format,$gmt) {
classes/microdata.php:229:  public function get_the_archive_description($descrip) {
classes/microdata.php:234:  public function get_the_archive_title($title) {
classes/microdata.php:244:  public function get_the_date($the_date,$format,$postID) {
classes/microdata.php:252:  public function get_the_title($title,$id) {
classes/microdata.php:260:  public function post_thumbnail_html($html) {
classes/microdata.php:265:  public function single_term_title($title) {
classes/microdata.php:271:  public function the_author_posts_link($link) {
classes/microdata.php:278:  public function wp_get_attachment_image_attributes($attr,$attachment) {
classes/microdata.php:283:  public function wp_get_attachment_link($link) {
classes/microdata.php:289:  /**  Helper functions  **/
classes/microdata.php:291:  public function description($text) {
classes/microdata.php:296:  public function email_format($email) {
classes/microdata.php:301:  public function image_html($image) {
classes/microdata.php:305:  public function name($name) {
classes/microdata.php:310:  public function telephone($phone) {
classes/microdata.php:315:  public function url_format($url) {
classes/microdata.php:321:  /**  Address functions  **/
classes/microdata.php:323:  public function city($city) {
classes/microdata.php:328:  public function pobox($pobox) {
classes/microdata.php:333:  public function state($state) {
classes/microdata.php:338:  public function street($street) {
classes/microdata.php:343:  public function zipcode($zipcode) {
classes/microdata.php:349:  /**  Private functions  **/
classes/microdata.php:351:  private function called_by($test=array()) {
classes/microdata.php:354:      if (!isset($entry['function'])) continue;
classes/microdata.php:355:      if (in_array($entry['function'],(array)$test)) return true;
classes/custom-post.php:25:  protected $logging     = 'log_entry'; #    assign your own logging function here
classes/custom-post.php:60:  public function __construct($data) {
classes/custom-post.php:106:  public function __destruct() {  // FIXME:  php internals - will this get called?
classes/custom-post.php:111:  public function __get($name) {
classes/custom-post.php:118:  public function __isset($name) {
classes/custom-post.php:123:  /**  Text functions  **/
classes/custom-post.php:125:  public function contextual_help( $contextual_help, $screen_id, $screen ) {
classes/custom-post.php:135:  protected function translate_post_count($count) {
classes/custom-post.php:139:  protected function translated_text() {
classes/custom-post.php:187:  /* Create Post Type functions */
classes/custom-post.php:189:  public function create_post_type() {
classes/custom-post.php:219:  protected function post_type_labels() {
classes/custom-post.php:256:  public function post_type_messages($messages) {
classes/custom-post.php:282:  public function register_sidebar() {
classes/custom-post.php:294:  public function add_caps() {
classes/custom-post.php:301:  private function process_caps($name) {
classes/custom-post.php:318:  /* Taxonomy functions */
classes/custom-post.php:320:  protected function taxonomy_labels($single,$plural) {
classes/custom-post.php:346:  protected function taxonomy_registration($args) {
classes/custom-post.php:376:            if (is_array($func) && method_exists($func[0],$func[1])) { non_function(); } // FIXME?
classes/custom-post.php:378:            elseif (function_exists($func))     { $defs = $func(); }
classes/custom-post.php:403:      add_filter("cpt_{$this->type}_pre_get_posts", function($query) use ($tax) {
classes/custom-post.php:418:  private function add_builtins() {
classes/custom-post.php:419:    $this->logging('function: add_builtins');
classes/custom-post.php:428:  public function stop_slug_edit() {
classes/custom-post.php:438:  /*  Term functions  */
classes/custom-post.php:440:  public function stop_term_deletion() {
classes/custom-post.php:465:  private function get_term_id($term,$tax) {
classes/custom-post.php:473:/*  public function taxonomy_menu_dropdown($taxonomy,$args='hide_empty=1') {
classes/custom-post.php:488:  /*  Post Admin Column functions/filters  */
classes/custom-post.php:493:  private function setup_columns() {
classes/custom-post.php:501:        $this->logging('columns[callback] function name not callable',$this->columns['callback']); } }
classes/custom-post.php:506:  public function remove_custom_post_columns($columns) {
classes/custom-post.php:512:  public function add_custom_post_columns($columns) {
classes/custom-post.php:523:  public function add_custom_post_columns_sortable($columns) {
classes/custom-post.php:535:  public function sort_get_posts($query) {
classes/custom-post.php:536:    if (is_admin() && function_exists('get_current_screen')) {
classes/custom-post.php:554:  public function display_custom_post_column($column,$post_id) {
classes/custom-post.php:569:  public function manage_users_columns($column_headers) {
classes/custom-post.php:575:  public function manage_users_custom_column($column,$column_name,$user_id) {
classes/custom-post.php:595:  private function get_author_post_type_counts() {
classes/custom-post.php:616:  public function assign_template($template) {
classes/custom-post.php:632:  private function locate_template($template,$slug) {
classes/custom-post.php:655:  private function assign_template_filters() {
classes/custom-post.php:667:      add_filter("{$key}_template", function($mytemplate) use ($key) { // FIXME:  does it need to use $this?
classes/custom-post.php:677:  public function archive_template($archive_template) {
classes/custom-post.php:685:  public function single_template($single_template) {
classes/custom-post.php:696:  public function comments_limit($open,$post_id) {
classes/custom-post.php:717:	public function pre_get_posts($query) {
classes/custom-post.php:723:	protected function add_post_type($query) {
classes/custom-post.php:735:  public function omit_get_posts($query) {
classes/custom-post.php:764:  public function check_meta_boxes() {
classes/custom-post.php:776:  public function logging() {
classes/custom-post.php:782:      } elseif (function_exists($log)) {            #  Function
classes/autocomplete.php:13:	static function load() {
classes/autocomplete.php:17:	static function init() {
classes/autocomplete.php:27:	static function get_search_form( $form ) {
classes/autocomplete.php:35:	static function autocomplete_suggestions() {
classes/Widgets/Search.php:5:  function __construct() {
classes/Widgets/Search.php:13:  public function inner_widget($args,$instance) {
classes/Widgets/Logo.php:5:  function __construct() {
classes/Widgets/Logo.php:12:  public function inner_widget($args,$instance) {
classes/Widgets/Logo.php:19:	public function form($instance) {
classes/Widgets/Address.php:7:	function __construct() {
classes/Widgets/Address.php:21:	public function inner_widget($args,$instance) { ?>
classes/Widgets/Address.php:60:	public function form($instance) {
classes/Widgets/Address.php:69:	public function update($new,$old) {
classes/Widgets/Basic.php:10:  function __construct($slug='',$title='',$desc=array()) {
classes/Widgets/Basic.php:16:  public function widget($args,$instance) {
classes/Widgets/Basic.php:29:  public function form($instance) {
classes/Widgets/Basic.php:33:	protected function form_title($instance) {
classes/Widgets/Basic.php:39:	protected function form_field($instance,$slug,$text) {
classes/Widgets/Basic.php:51:	protected function form_checkbox($instance,$slug,$text) {
classes/Widgets/Basic.php:63:  public function update($new,$old) {
classes/Widgets/Login.php:5:  function __construct() {
classes/Widgets/Login.php:12:  public function inner_widget($args,$instance) {
classes/admin-form.php:26:  abstract protected function form_layout($option);
classes/admin-form.php:27:  public function description() { return ''; }
classes/admin-form.php:29:  protected function __construct() {
classes/admin-form.php:37:  public function load_form_page() {
classes/admin-form.php:54:  public function customize_register($wp_customize) {
classes/admin-form.php:61:  public function enqueue_scripts() {
classes/admin-form.php:70:  /**  Form text functions  **/
classes/admin-form.php:72:  private function form_text() {
classes/admin-form.php:73:    $text = array('error'  => array('render'    => _x('ERROR: Unable to locate function %s','string - a function name','tcc-fluid'),
classes/admin-form.php:87:  /**  Register Screen functions **/
classes/admin-form.php:89:  private function screen_type() {
classes/admin-form.php:96:  public function register_single_form() {
classes/admin-form.php:109:  public function register_tabbed_form() {
classes/admin-form.php:129:  private function register_field($option,$key,$itemID,$data) {
classes/admin-form.php:149:  private function field_label($ID,$data) {
classes/admin-form.php:172:  public function customizer_settings($wp_customize,$base) {
classes/admin-form.php:224:  private function sanitize_callback($option) {
classes/admin-form.php:228:    } else if (function_exists($valid_func)) {
classes/admin-form.php:237:  /**  Data functions  **/
classes/admin-form.php:239:	private function check_tab() {
classes/admin-form.php:244:  private function determine_option() {
classes/admin-form.php:256:  protected function get_defaults($option) {
classes/admin-form.php:283:  private function get_form_options() {
classes/admin-form.php:293:  /**  Render Screen functions  **/
classes/admin-form.php:295:  public function render_single_form() { ?>
classes/admin-form.php:312:  public function render_tabbed_form() {
classes/admin-form.php:340:  private function submit_buttons($title='') {
classes/admin-form.php:352:  public function render_single_options($args) {
classes/admin-form.php:373:      } elseif (function_exists($func)) {
classes/admin-form.php:384:  public function render_tabbed_options($args) {
classes/admin-form.php:399:      } elseif (function_exists($func)) {
classes/admin-form.php:410:  public function render_multi_options($args) {
classes/admin-form.php:413:  private function render_attributes($layout) {
classes/admin-form.php:425:  /**  Render Items functions
classes/admin-form.php:433:  private function render_array($data) {
classes/admin-form.php:443:  private function render_checkbox($data) {
classes/admin-form.php:453:  private function render_colorpicker($data) {
classes/admin-form.php:461:  private function render_display($data) {
classes/admin-form.php:467:  private function render_font($data) {
classes/admin-form.php:481:  private function render_image($data) {
classes/admin-form.php:494:  private function render_radio($data) {
classes/admin-form.php:514:  private function render_select($data) {
classes/admin-form.php:529:    } elseif (function_exists($source_func)) {
classes/admin-form.php:535:  private function render_showhide($layout) {
classes/admin-form.php:543:  private function render_text($data) {
classes/admin-form.php:557:  private function render_text_color($data) {
classes/admin-form.php:568:  private function render_title($data) {
classes/admin-form.php:575:  /**  Validate functions  **/
classes/admin-form.php:577:  public function validate_single_form($input) {
classes/admin-form.php:594:            $vals[] = $this->do_validate_function($indiv,$item);
classes/admin-form.php:598:          $output[$key][$ID] = $this->do_validate_function($subdata,$item);
classes/admin-form.php:615:  public function validate_tabbed_form($input) {
classes/admin-form.php:632:          $output[$key][$ID] = $this->do_validate_function($subdata,$item);
classes/admin-form.php:635:        $output[$key] = $this->do_validate_function($data,$item);
classes/admin-form.php:642:  private function do_validate_function($input,$item) {
classes/admin-form.php:648:    } elseif (function_exists($func)) {
classes/admin-form.php:656:  private function validate_colorpicker($input) {
classes/admin-form.php:660:  private function validate_image($input) {
classes/admin-form.php:664:  private function validate_post_content($input) {
classes/admin-form.php:668:  private function validate_radio($input) {
classes/admin-form.php:672:  private function validate_select($input) {
classes/admin-form.php:676:  protected function validate_text($input) {
classes/admin-form.php:680:  private function validate_text_color($input) {
classes/admin-form.php:684:  private function validate_url($input) {
Binary file .sass-cache/190188c4b665b1910809b566e3467839d4b4d70a/_vendor-prefixes.scssc matches
tcpdf/tcpdf_parser.php:102:	public function __construct($data, $cfg=array()) {
tcpdf/tcpdf_parser.php:139:	protected function setConfig($cfg) {
tcpdf/tcpdf_parser.php:157:	public function getParsedData() {
tcpdf/tcpdf_parser.php:169:	protected function getXrefData($offset=0, $xref=array()) {
tcpdf/tcpdf_parser.php:211:	protected function decodeXref($startxref, $xref=array()) {
tcpdf/tcpdf_parser.php:283:	protected function decodeXrefStream($startxref, $xref=array()) {
tcpdf/tcpdf_parser.php:497:	protected function getRawObject($offset=0) {
tcpdf/tcpdf_parser.php:677:	protected function getIndirectObject($obj_ref, $offset=0, $decoding=true) {
tcpdf/tcpdf_parser.php:720:	protected function getObjectVal($obj) {
tcpdf/tcpdf_parser.php:743:	protected function decodeStream($sdic, $stream) {
tcpdf/tcpdf_parser.php:803:	public function Error($msg) {
tcpdf/README.TXT:32:    * no external libraries are required for the basic functions;
tcpdf/README.TXT:98:	All the original binary TTF font files have been renamed for compatibility with TCPDF and compressed using the gzcompress PHP function that uses the ZLIB data format (.z files).
tcpdf/fonts/freefont-20120503/COPYING:314:suffice to ensure that the continued functioning of the modified object
tcpdf/fonts/freefont-20120503/ChangeLog:2203:	  tools/test/checkGlyphNumbers.py: Made to function
tcpdf/fonts/freefont-20120503/ChangeLog:2310:	  messy node problems, others are due to some malfunction of
tcpdf/fonts/freefont-20120503/ChangeLog:2379:	  characters. nearing functionality of serif version.
tcpdf/fonts/freefont-20120503/ChangeLog:4509:	  function yet... )
tcpdf/fonts/freefont-20120503/ChangeLog:4985:	  sans, lookups are basically functional now. Used 'ccmp' Ligature
tcpdf/fonts/freefont-20120503/ChangeLog:7409:	  different functionalities of this large script
tcpdf/fonts/freefont-20120503/ChangeLog:7686:	  they're now all functional (except styled Mono faces have none).
tcpdf/fonts/freefont-20120503/ChangeLog:8732:	  numbers for user's functions." (probably has been there since I
tcpdf/fonts/freefont-20120503/ChangeLog:9062:	  crash that loses data on this function.
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:2203:	  tools/test/checkGlyphNumbers.py: Made to function
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:2310:	  messy node problems, others are due to some malfunction of
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:2379:	  characters. nearing functionality of serif version.
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:4509:	  function yet... )
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:4985:	  sans, lookups are basically functional now. Used 'ccmp' Ligature
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:7409:	  different functionalities of this large script
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:7686:	  they're now all functional (except styled Mono faces have none).
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:8732:	  numbers for user's functions." (probably has been there since I
tcpdf/fonts/freefont-20120503/ChangeLog.10070.BAK:9062:	  crash that loses data on this function.
tcpdf/fonts/freefont-20100919/COPYING:314:suffice to ensure that the continued functioning of the modified object
tcpdf/fonts/freefont-20100919/ChangeLog:317:	Vietamese:  In roman and sans, lookups are basically functional now.
tcpdf/fonts/freefont-20100919/ChangeLog:2193:	I think they're now all functional (except styled Mono faces have none).
tcpdf/fonts/freefont-20100919/ChangeLog:3031:	SerifBold: "There exists a 'fpgm' code that seems incompatible with FontForge's. Instructions generated will be of lower quality. If legacy hinting is to be scrapped, it is suggested to clear the `fpgm` and repeat autoinstructing. It will be then possible to append user's code to FontForge's 'fpgm', but due to possible future updates, it is extremely advised to use high numbers for user's functions."
tcpdf/fonts/freefont-20100919/ChangeLog:3299:	current FontForge has a nasty crash that loses data on this function.
tcpdf/tools/tcpdf_addfont.php:60:function showHelp() {
tcpdf/tcpdf_import.php:68:	public function importPDF($filename) {
tcpdf/LICENSE.TXT:62:facility refers to a function or data to be supplied by an Application
tcpdf/LICENSE.TXT:69:   function or data, the facility still operates, and performs
tcpdf/LICENSE.TXT:81:layouts and accessors, or small macros, inline functions and templates
tcpdf/LICENSE.TXT:495:suffice to ensure that the continued functioning of the modified object
tcpdf/tcpdf_barcodes_2d.php:68:	public function __construct($code, $type) {
tcpdf/tcpdf_barcodes_2d.php:76:	public function getBarcodeArray() {
tcpdf/tcpdf_barcodes_2d.php:87:	public function getBarcodeSVG($w=3, $h=3, $color='black') {
tcpdf/tcpdf_barcodes_2d.php:108:	public function getBarcodeSVGcode($w=3, $h=3, $color='black') {
tcpdf/tcpdf_barcodes_2d.php:144:	public function getBarcodeHTML($w=10, $h=10, $color='black') {
tcpdf/tcpdf_barcodes_2d.php:172:	public function getBarcodePNG($w=3, $h=3, $color=array(0,0,0)) {
tcpdf/tcpdf_barcodes_2d.php:193:	public function getBarcodePngData($w=3, $h=3, $color=array(0,0,0)) {
tcpdf/tcpdf_barcodes_2d.php:197:		if (function_exists('imagecreate')) {
tcpdf/tcpdf_barcodes_2d.php:252:	public function setBarcode($code, $type) {
tcpdf/tcpdf.php:41://  * no external libraries are required for the basic functions;
tcpdf/tcpdf.php:76: * <li>no external libraries are required for the basic functions;</li>
tcpdf/tcpdf.php:1826:	 * IMPORTANT: Please note that this method sets the mb_internal_encoding to ASCII, so if you are using the mbstring module functions with TCPDF you need to correctly set/unset the mb_internal_encoding when needed.
tcpdf/tcpdf.php:1838:	public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false, $pdfa=false) {
tcpdf/tcpdf.php:1840:		if (function_exists('mb_internal_encoding') AND mb_internal_encoding()) {
tcpdf/tcpdf.php:1988:		register_shutdown_function(array($this, '_destroy'), true);
tcpdf/tcpdf.php:1996:	public function __destruct() {
tcpdf/tcpdf.php:2011:	public function setPageUnit($unit) {
tcpdf/tcpdf.php:2103:	protected function setPageFormat($format, $orientation='P') {
tcpdf/tcpdf.php:2217:	public function setPageOrientation($orientation, $autopagebreak='', $bottommargin='') {
tcpdf/tcpdf.php:2323:	public function setSpacesRE($re='/[^\S\xa0]/') {
tcpdf/tcpdf.php:2348:	public function setRTL($enable, $resetx=true) {
tcpdf/tcpdf.php:2364:	public function getRTL() {
tcpdf/tcpdf.php:2374:	public function setTempRTL($mode) {
tcpdf/tcpdf.php:2406:	public function isRTLTextDir() {
tcpdf/tcpdf.php:2417:	public function setLastH($h) {
tcpdf/tcpdf.php:2427:	public function getCellHeight($fontsize, $padding=TRUE) {
tcpdf/tcpdf.php:2440:	public function resetLastH() {
tcpdf/tcpdf.php:2450:	public function getLastH() {
tcpdf/tcpdf.php:2461:	public function setImageScale($scale) {
tcpdf/tcpdf.php:2472:	public function getImageScale() {
tcpdf/tcpdf.php:2485:	public function getPageDimensions($pagenum='') {
tcpdf/tcpdf.php:2501:	public function getPageWidth($pagenum='') {
tcpdf/tcpdf.php:2517:	public function getPageHeight($pagenum='') {
tcpdf/tcpdf.php:2533:	public function getBreakMargin($pagenum='') {
tcpdf/tcpdf.php:2547:	public function getScaleFactor() {
tcpdf/tcpdf.php:2561:	public function SetMargins($left, $top, $right=-1, $keepmargins=false) {
tcpdf/tcpdf.php:2583:	public function SetLeftMargin($margin) {
tcpdf/tcpdf.php:2598:	public function SetTopMargin($margin) {
tcpdf/tcpdf.php:2613:	public function SetRightMargin($margin) {
tcpdf/tcpdf.php:2627:	public function SetCellPadding($pad) {
tcpdf/tcpdf.php:2646:	public function setCellPaddings($left='', $top='', $right='', $bottom='') {
tcpdf/tcpdf.php:2668:	public function getCellPaddings() {
tcpdf/tcpdf.php:2682:	public function setCellMargins($left='', $top='', $right='', $bottom='') {
tcpdf/tcpdf.php:2704:	public function getCellMargins() {
tcpdf/tcpdf.php:2715:	protected function adjustCellPadding($brd=0) {
tcpdf/tcpdf.php:2790:	public function SetAutoPageBreak($auto, $margin=0) {
tcpdf/tcpdf.php:2802:	public function getAutoPageBreak() {
tcpdf/tcpdf.php:2814:	public function SetDisplayMode($zoom, $layout='SinglePage', $mode='UseNone') {
tcpdf/tcpdf.php:2831:	public function SetCompression($compress=true) {
tcpdf/tcpdf.php:2832:		if (function_exists('gzcompress')) {
tcpdf/tcpdf.php:2845:	public function setSRGBmode($mode=false) {
tcpdf/tcpdf.php:2856:	public function SetDocInfoUnicode($unicode=true) {
tcpdf/tcpdf.php:2867:	public function SetTitle($title) {
tcpdf/tcpdf.php:2878:	public function SetSubject($subject) {
tcpdf/tcpdf.php:2889:	public function SetAuthor($author) {
tcpdf/tcpdf.php:2900:	public function SetKeywords($keywords) {
tcpdf/tcpdf.php:2911:	public function SetCreator($creator) {
tcpdf/tcpdf.php:2921:	public function Error($msg) {
tcpdf/tcpdf.php:2939:	public function Open() {
tcpdf/tcpdf.php:2951:	public function Close() {
tcpdf/tcpdf.php:2995:	public function setPage($pnum, $resetmargins=false) {
tcpdf/tcpdf.php:3031:			$this->Error('Wrong page number on setPage() function: '.$pnum);
tcpdf/tcpdf.php:3042:	public function lastPage($resetmargins=false) {
tcpdf/tcpdf.php:3053:	public function getPage() {
tcpdf/tcpdf.php:3064:	public function getNumPages() {
tcpdf/tcpdf.php:3077:	public function addTOCPage($orientation='', $format='', $keepmargins=false) {
tcpdf/tcpdf.php:3087:	public function endTOCPage() {
tcpdf/tcpdf.php:3102:	public function AddPage($orientation='', $format='', $keepmargins=false, $tocpage=false) {
tcpdf/tcpdf.php:3126:	public function endPage($tocpage=false) {
tcpdf/tcpdf.php:3143:	 * Starts a new page to the document. The page must be closed using the endPage() function.
tcpdf/tcpdf.php:3152:	public function startPage($orientation='', $format='', $tocpage=false) {
tcpdf/tcpdf.php:3218:	 * This function must be called after calling Image() function for a background image.
tcpdf/tcpdf.php:3219:	 * Background images must be always inserted before calling Multicell() or WriteHTMLCell() or WriteHTML() functions.
tcpdf/tcpdf.php:3223:	public function setPageMark() {
tcpdf/tcpdf.php:3236:	protected function setContentMark($page=0) {
tcpdf/tcpdf.php:3257:	public function setHeaderData($ln='', $lw=0, $ht='', $hs='', $tc=array(0,0,0), $lc=array(0,0,0)) {
tcpdf/tcpdf.php:3272:	public function setFooterData($tc=array(0,0,0), $lc=array(0,0,0)) {
tcpdf/tcpdf.php:3284:	public function getHeaderData() {
tcpdf/tcpdf.php:3301:	public function setHeaderMargin($hm=10) {
tcpdf/tcpdf.php:3311:	public function getHeaderMargin() {
tcpdf/tcpdf.php:3321:	public function setFooterMargin($fm=10) {
tcpdf/tcpdf.php:3331:	public function getFooterMargin() {
tcpdf/tcpdf.php:3339:	public function setPrintHeader($val=true) {
tcpdf/tcpdf.php:3348:	public function setPrintFooter($val=true) {
tcpdf/tcpdf.php:3357:	public function getImageRBX() {
tcpdf/tcpdf.php:3366:	public function getImageRBY() {
tcpdf/tcpdf.php:3374:	public function resetHeaderTemplate() {
tcpdf/tcpdf.php:3383:	public function setHeaderTemplateAutoreset($val=true) {
tcpdf/tcpdf.php:3392:	public function Header() {
tcpdf/tcpdf.php:3469:	public function Footer() {
tcpdf/tcpdf.php:3516:	protected function setHeader() {
tcpdf/tcpdf.php:3557:	protected function setFooter() {
tcpdf/tcpdf.php:3613:	protected function inPageBody() {
tcpdf/tcpdf.php:3622:	protected function setTableHeader() {
tcpdf/tcpdf.php:3689:	public function PageNo() {
tcpdf/tcpdf.php:3699:	public function getAllSpotColors() {
tcpdf/tcpdf.php:3716:	public function AddSpotColor($name, $c, $m, $y, $k) {
tcpdf/tcpdf.php:3732:	public function setSpotColor($type, $name, $tint=100) {
tcpdf/tcpdf.php:3778:	public function SetDrawSpotColor($name, $tint=100) {
tcpdf/tcpdf.php:3790:	public function SetFillSpotColor($name, $tint=100) {
tcpdf/tcpdf.php:3802:	public function SetTextSpotColor($name, $tint=100) {
tcpdf/tcpdf.php:3817:	public function setColorArray($type, $color, $ret=false) {
tcpdf/tcpdf.php:3848:	public function SetDrawColorArray($color, $ret=false) {
tcpdf/tcpdf.php:3862:	public function SetFillColorArray($color, $ret=false) {
tcpdf/tcpdf.php:3875:	public function SetTextColorArray($color, $ret=false) {
tcpdf/tcpdf.php:3892:	public function setColor($type, $col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
tcpdf/tcpdf.php:3982:	public function SetDrawColor($col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
tcpdf/tcpdf.php:3999:	public function SetFillColor($col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
tcpdf/tcpdf.php:4016:	public function SetTextColor($col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
tcpdf/tcpdf.php:4032:	public function GetStringWidth($s, $fontname='', $fontstyle='', $fontsize=0, $getarray=false) {
tcpdf/tcpdf.php:4048:	public function GetArrStringWidth($sa, $fontname='', $fontstyle='', $fontsize=0, $getarray=false) {
tcpdf/tcpdf.php:4087:	public function GetCharWidth($char, $notlast=true) {
tcpdf/tcpdf.php:4109:	public function getRawCharWidth($char) {
tcpdf/tcpdf.php:4135:	public function GetNumChars($s) {
tcpdf/tcpdf.php:4147:	protected function getFontsList() {
tcpdf/tcpdf.php:4171:	public function AddFont($family, $style='', $fontfile='', $subset='default') {
tcpdf/tcpdf.php:4427:	public function SetFont($family, $style='', $size=null, $fontfile='', $subset='default', $out=true) {
tcpdf/tcpdf.php:4455:	public function SetFontSize($size, $out=true) {
tcpdf/tcpdf.php:4495:	public function getFontBBox() {
tcpdf/tcpdf.php:4534:	public function getAbsFontMeasure($s) {
tcpdf/tcpdf.php:4544:	public function getCharBBox($char) {
tcpdf/tcpdf.php:4567:	public function getFontDescent($font, $style='', $size=0) {
tcpdf/tcpdf.php:4588:	public function getFontAscent($font, $style='', $size=0) {
tcpdf/tcpdf.php:4608:	public function isCharDefined($char, $font='', $style='') {
tcpdf/tcpdf.php:4635:	public function replaceMissingChars($text, $font='', $style='', $subs=array()) {
tcpdf/tcpdf.php:4672:	public function SetDefaultMonospacedFont($font) {
tcpdf/tcpdf.php:4683:	public function AddLink() {
tcpdf/tcpdf.php:4699:	public function SetLink($link, $y=0, $page=-1) {
tcpdf/tcpdf.php:4728:	public function Link($x, $y, $w, $h, $link, $spaces=0) {
tcpdf/tcpdf.php:4745:	public function Annotation($x, $y, $w, $h, $text, $opt=array('Subtype'=>'Text'), $spaces=0) {
tcpdf/tcpdf.php:4835:	protected function _putEmbeddedFiles() {
tcpdf/tcpdf.php:4877:	 * @param $fclip (boolean) if true activate clipping mode (you must call StartTransform() before this function and StopTransform() to stop the clipping tranformation).
tcpdf/tcpdf.php:4893:	public function Text($x, $y, $txt, $fstroke=false, $fclip=false, $ffill=true, $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M', $rtloff=false) {
tcpdf/tcpdf.php:4913:	public function AcceptPageBreak() {
tcpdf/tcpdf.php:4940:	protected function checkPageBreak($h=0, $y='', $addpage=true) {
tcpdf/tcpdf.php:4994:	public function Cell($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M') {
tcpdf/tcpdf.php:5063:	protected function getCellCode($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M') {
tcpdf/tcpdf.php:5531:	protected function replaceChar($oldchar, $newchar) {
tcpdf/tcpdf.php:5554:	protected function getCellBorder($x, $y, $w, $h, $brd) {
tcpdf/tcpdf.php:5757:	public function MultiCell($w, $h, $txt, $border=0, $align='J', $fill=false, $ln=1, $x='', $y='', $reseth=true, $stretch=0, $ishtml=false, $autopadding=true, $maxh=0, $valign='T', $fitcell=false) {
tcpdf/tcpdf.php:6120:	public function getNumLines($txt, $w=0, $reseth=false, $autopadding=true, $cellpadding='', $border=0) {
tcpdf/tcpdf.php:6201:	 *  // call your printing functions with your parameters
tcpdf/tcpdf.php:6239:	public function getStringHeight($w, $txt, $reseth=false, $autopadding=true, $cellpadding='', $border=0) {
tcpdf/tcpdf.php:6272:	public function Write($h, $txt, $link='', $fill=false, $align='', $ln=false, $stretch=0, $firstline=false, $firstblock=false, $maxh=0, $wadj=0, $margin='') {
tcpdf/tcpdf.php:6703:	protected function getRemainingWidth() {
tcpdf/tcpdf.php:6723:	protected function fitBlock($w, $h, $x, $y, $fitonpage=false) {
tcpdf/tcpdf.php:6807:	 * @param $imgmask (mixed) image object returned by this function or false
tcpdf/tcpdf.php:6818:	public function Image($file, $x='', $y='', $w=0, $h=0, $type='', $link='', $align='', $resize=false, $dpi=300, $palign='', $ismask=false, $imgmask=false, $border=0, $fitbox=false, $hidden=false, $fitonpage=false, $alt=false, $altimgs=array()) {
tcpdf/tcpdf.php:7019:			// GD image handler function
tcpdf/tcpdf.php:7020:			$gdfunction = 'imagecreatefrom'.$type;
tcpdf/tcpdf.php:7022:			if ((method_exists('TCPDF_IMAGES', $mtd)) AND (!($resize AND (function_exists($gdfunction) OR extension_loaded('imagick'))))) {
tcpdf/tcpdf.php:7023:				// TCPDF image functions
tcpdf/tcpdf.php:7030:			if (($info === false) AND function_exists($gdfunction)) {
tcpdf/tcpdf.php:7033:					$img = $gdfunction($file);
tcpdf/tcpdf.php:7238:	protected function ImagePngAlpha($file, $x, $y, $wpx, $hpx, $w, $h, $type, $link, $align, $resize, $dpi, $palign, $filehash='') {
tcpdf/tcpdf.php:7281:		if (($parsed === false) AND function_exists('imagecreatefrompng')) {
tcpdf/tcpdf.php:7332:	protected function getGDgamma($img, $c) {
tcpdf/tcpdf.php:7357:	public function Ln($h='', $cell=false) {
tcpdf/tcpdf.php:7391:	public function GetX() {
tcpdf/tcpdf.php:7407:	public function GetAbsX() {
tcpdf/tcpdf.php:7418:	public function GetY() {
tcpdf/tcpdf.php:7431:	public function SetX($x, $rtloff=false) {
tcpdf/tcpdf.php:7464:	public function SetY($y, $resetx=true, $rtloff=false) {
tcpdf/tcpdf.php:7497:	public function SetXY($x, $y, $rtloff=false) {
tcpdf/tcpdf.php:7509:	public function SetAbsX($x) {
tcpdf/tcpdf.php:7520:	public function SetAbsY($y) {
tcpdf/tcpdf.php:7532:	public function SetAbsXY($x, $y) {
tcpdf/tcpdf.php:7548:	public function Output($name='doc.pdf', $dest='I') {
tcpdf/tcpdf.php:7746:	public function _destroy($destroyall=false, $preserve_objcopy=false) {
tcpdf/tcpdf.php:7781:	protected function _dochecks() {
tcpdf/tcpdf.php:7798:	protected function getInternalPageNumberAliases($a= '') {
tcpdf/tcpdf.php:7819:	protected function getAllInternalPageNumberAliases() {
tcpdf/tcpdf.php:7837:	protected function replaceRightShiftPageNumAliases($page, $aliases, $diff) {
tcpdf/tcpdf.php:7872:	protected function setPageBoxTypes($boxes) {
tcpdf/tcpdf.php:7885:	protected function _putpages() {
tcpdf/tcpdf.php:8047:	protected function _getannotsrefs($n) {
tcpdf/tcpdf.php:8091:	protected function _putannotsobjs() {
tcpdf/tcpdf.php:8734:	protected function _putAPXObject($w=0, $h=0, $stream='') {
tcpdf/tcpdf.php:8764:	protected function _putfonts() {
tcpdf/tcpdf.php:8789:				} elseif ($info['subset'] AND ((!$compressed) OR ($compressed AND function_exists('gzcompress')))) {
tcpdf/tcpdf.php:8916:	protected function _puttruetypeunicode($font) {
tcpdf/tcpdf.php:9020:	protected function _putcidfont0($font) {
tcpdf/tcpdf.php:9090:	protected function _putimages() {
tcpdf/tcpdf.php:9219:	protected function _putxobjects() {
tcpdf/tcpdf.php:9322:	protected function _putspotcolors() {
tcpdf/tcpdf.php:9342:	protected function _getxobjectdict() {
tcpdf/tcpdf.php:9354:	protected function _putresourcedict() {
tcpdf/tcpdf.php:9418:	protected function _putresources() {
tcpdf/tcpdf.php:9441:	protected function _putinfo() {
tcpdf/tcpdf.php:9492:	public function setExtraXMP($xmp) {
tcpdf/tcpdf.php:9502:	protected function _putXMP() {
tcpdf/tcpdf.php:9640:	protected function _putcatalog() {
tcpdf/tcpdf.php:9827:	protected function _putviewerpreferences() {
tcpdf/tcpdf.php:9899:	protected function _putheader() {
tcpdf/tcpdf.php:9908:	protected function _enddoc() {
tcpdf/tcpdf.php:9999:	protected function _beginpage($orientation='', $format='') {
tcpdf/tcpdf.php:10042:	protected function _endpage() {
tcpdf/tcpdf.php:10052:	protected function _newobj() {
tcpdf/tcpdf.php:10064:	protected function _getobj($objid='') {
tcpdf/tcpdf.php:10081:	protected function _dounderline($x, $y, $txt) {
tcpdf/tcpdf.php:10094:	protected function _dounderlinew($x, $y, $w) {
tcpdf/tcpdf.php:10106:	protected function _dolinethrough($x, $y, $txt) {
tcpdf/tcpdf.php:10119:	protected function _dolinethroughw($x, $y, $w) {
tcpdf/tcpdf.php:10132:	protected function _dooverline($x, $y, $txt) {
tcpdf/tcpdf.php:10145:	protected function _dooverlinew($x, $y, $w) {
tcpdf/tcpdf.php:10158:	protected function _datastring($s, $n=0) {
tcpdf/tcpdf.php:10172:	public function setDocCreationTimestamp($time) {
tcpdf/tcpdf.php:10185:	public function setDocModificationTimestamp($time) {
tcpdf/tcpdf.php:10198:	public function getDocCreationTimestamp() {
tcpdf/tcpdf.php:10208:	public function getDocModificationTimestamp() {
tcpdf/tcpdf.php:10220:	protected function _datestring($n=0, $timestamp=0) {
tcpdf/tcpdf.php:10234:	protected function _textstring($s, $n=0) {
tcpdf/tcpdf.php:10250:	protected function _getrawstream($s, $n=0) {
tcpdf/tcpdf.php:10263:	protected function _out($s) {
tcpdf/tcpdf.php:10292:	public function setHeaderFont($font) {
tcpdf/tcpdf.php:10302:	public function getHeaderFont() {
tcpdf/tcpdf.php:10312:	public function setFooterFont($font) {
tcpdf/tcpdf.php:10322:	public function getFooterFont() {
tcpdf/tcpdf.php:10332:	public function setLanguageArray($language) {
tcpdf/tcpdf.php:10345:	public function getPDFData() {
tcpdf/tcpdf.php:10364:	public function addHtmlLink($url, $name, $fill=false, $firstline=false, $color='', $style=-1, $firstblock=false) {
tcpdf/tcpdf.php:10406:	public function pixelsToUnits($px) {
tcpdf/tcpdf.php:10411:	 * Reverse function for htmlentities.
tcpdf/tcpdf.php:10417:	public function unhtmlentities($text_to_convert) {
tcpdf/tcpdf.php:10432:	protected function _objectkey($n) {
tcpdf/tcpdf.php:10452:	protected function _encrypt_data($n, $s) {
tcpdf/tcpdf.php:10480:	protected function _putencryption() {
tcpdf/tcpdf.php:10600:	protected function _Uvalue() {
tcpdf/tcpdf.php:10633:	protected function _UEvalue() {
tcpdf/tcpdf.php:10645:	protected function _Ovalue() {
tcpdf/tcpdf.php:10683:	protected function _OEvalue() {
tcpdf/tcpdf.php:10696:	protected function _fixAES256Password($password) {
tcpdf/tcpdf.php:10711:	protected function _generateencryptionkey() {
tcpdf/tcpdf.php:10829:	public function SetProtection($permissions=array('print', 'modify', 'copy', 'annot-forms', 'fill-forms', 'extract', 'assemble', 'print-high'), $user_pass='', $owner_pass=null, $mode=0, $pubkeys=null) {
tcpdf/tcpdf.php:10842:			if (!function_exists('openssl_pkcs7_encrypt')) {
tcpdf/tcpdf.php:10867:			if (($mode == 3) AND !function_exists('hash')) {
tcpdf/tcpdf.php:10929:	 * This function must be called before scaling, mirroring, translation, rotation and skewing.
tcpdf/tcpdf.php:10935:	public function StartTransform() {
tcpdf/tcpdf.php:10952:	 * This function must be called after scaling, mirroring, translation, rotation and skewing.
tcpdf/tcpdf.php:10958:	public function StopTransform() {
tcpdf/tcpdf.php:10983:	public function ScaleX($s_x, $x='', $y='') {
tcpdf/tcpdf.php:10996:	public function ScaleY($s_y, $x='', $y='') {
tcpdf/tcpdf.php:11009:	public function ScaleXY($s, $x='', $y='') {
tcpdf/tcpdf.php:11023:	public function Scale($s_x, $s_y, $x='', $y='') {
tcpdf/tcpdf.php:11056:	public function MirrorH($x='') {
tcpdf/tcpdf.php:11067:	public function MirrorV($y='') {
tcpdf/tcpdf.php:11079:	public function MirrorP($x='',$y='') {
tcpdf/tcpdf.php:11092:	public function MirrorL($angle=0, $x='',$y='') {
tcpdf/tcpdf.php:11104:	public function TranslateX($t_x) {
tcpdf/tcpdf.php:11115:	public function TranslateY($t_y) {
tcpdf/tcpdf.php:11127:	public function Translate($t_x, $t_y) {
tcpdf/tcpdf.php:11149:	public function Rotate($angle, $x='', $y='') {
tcpdf/tcpdf.php:11179:	public function SkewX($angle_x, $x='', $y='') {
tcpdf/tcpdf.php:11192:	public function SkewY($angle_y, $x='', $y='') {
tcpdf/tcpdf.php:11206:	public function Skew($angle_x, $angle_y, $x='', $y='') {
tcpdf/tcpdf.php:11237:	protected function Transform($tm) {
tcpdf/tcpdf.php:11269:	public function SetLineWidth($width) {
tcpdf/tcpdf.php:11285:	public function GetLineWidth() {
tcpdf/tcpdf.php:11312:	public function SetLineStyle($style, $ret=false) {
tcpdf/tcpdf.php:11374:	protected function _outPoint($x, $y) {
tcpdf/tcpdf.php:11388:	protected function _outLine($x, $y) {
tcpdf/tcpdf.php:11404:	protected function _outRect($x, $y, $w, $h, $op) {
tcpdf/tcpdf.php:11422:	protected function _outCurve($x1, $y1, $x2, $y2, $x3, $y3) {
tcpdf/tcpdf.php:11438:	protected function _outCurveV($x2, $y2, $x3, $y3) {
tcpdf/tcpdf.php:11454:	protected function _outCurveY($x1, $y1, $x3, $y3) {
tcpdf/tcpdf.php:11471:	public function Line($x1, $y1, $x2, $y2, $style=array()) {
tcpdf/tcpdf.php:11489:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11501:	public function Rect($x, $y, $w, $h, $style='', $border_style=array(), $fill_color=array()) {
tcpdf/tcpdf.php:11565:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11572:	public function Curve($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3, $style='', $line_style=array(), $fill_color=array()) {
tcpdf/tcpdf.php:11595:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11602:	public function Polycurve($x0, $y0, $segments, $style='', $line_style=array(), $fill_color=array()) {
tcpdf/tcpdf.php:11634:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11642:	public function Ellipse($x0, $y0, $rx, $ry='', $angle=0, $astart=0, $afinish=360, $style='', $line_style=array(), $fill_color=array(), $nc=2) {
tcpdf/tcpdf.php:11683:	protected function _outellipticalarc($xc, $yc, $rx, $ry, $xang=0, $angs=0, $angf=360, $pie=false, $nc=2, $startpoint=true, $ccw=true, $svg=false) {
tcpdf/tcpdf.php:11807:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11814:	public function Circle($x0, $y0, $r, $angstr=0, $angend=360, $style='', $line_style=array(), $fill_color=array(), $nc=2) {
tcpdf/tcpdf.php:11821:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11832:	public function PolyLine($p, $style='', $line_style=array(), $fill_color=array()) {
tcpdf/tcpdf.php:11839:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11851:	public function Polygon($p, $style='', $line_style=array(), $fill_color=array(), $closed=true) {
tcpdf/tcpdf.php:11931:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:11952:	public function RegularPolygon($x0, $y0, $r, $ns, $angle=0, $draw_circle=false, $style='', $line_style=array(), $fill_color=array(), $circle_style='', $circle_outLine_style=array(), $circle_fill_color=array()) {
tcpdf/tcpdf.php:11978:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:12000:	public function StarPolygon($x0, $y0, $r, $nv, $ng, $angle=0, $draw_circle=false, $style='', $line_style=array(), $fill_color=array(), $circle_style='', $circle_outLine_style=array(), $circle_fill_color=array()) {
tcpdf/tcpdf.php:12036:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:12042:	public function RoundedRect($x, $y, $w, $h, $r, $round_corner='1111', $style='', $border_style=array(), $fill_color=array()) {
tcpdf/tcpdf.php:12055:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:12061:	public function RoundedRectXY($x, $y, $w, $h, $rx, $ry, $round_corner='1111', $style='', $border_style=array(), $fill_color=array()) {
tcpdf/tcpdf.php:12131:	public function Arrow($x0, $y0, $x1, $y1, $head_style=0, $arm_size=5, $arm_angle=15) {
tcpdf/tcpdf.php:12196:	public function setDestination($name, $y=-1, $page='', $x=-1) {
tcpdf/tcpdf.php:12239:	public function getDestination() {
tcpdf/tcpdf.php:12249:	protected function _putdests() {
tcpdf/tcpdf.php:12275:	public function setBookmark($txt, $level=0, $y=-1, $page='', $style='', $color=array(0,0,0), $x=-1, $link='') {
tcpdf/tcpdf.php:12292:	public function Bookmark($txt, $level=0, $y=-1, $page='', $style='', $color=array(0,0,0), $x=-1, $link='') {
tcpdf/tcpdf.php:12339:	protected function sortBookmarks() {
tcpdf/tcpdf.php:12357:	protected function _putbookmarks() {
tcpdf/tcpdf.php:12483:	public function IncludeJS($script) {
tcpdf/tcpdf.php:12496:	public function addJavascriptObject($script, $onload=false) {
tcpdf/tcpdf.php:12512:	protected function _putjavascript() {
tcpdf/tcpdf.php:12570:	protected function _addfield($type, $name, $x, $y, $w, $h, $prop) {
tcpdf/tcpdf.php:12606:	public function setFormDefaultProp($prop=array()) {
tcpdf/tcpdf.php:12617:	public function getFormDefaultProp() {
tcpdf/tcpdf.php:12635:	public function TextField($name, $w, $h, $prop=array(), $opt=array(), $x='', $y='', $js=false) {
tcpdf/tcpdf.php:12756:	public function RadioButton($name, $w, $prop=array(), $opt=array(), $onvalue='On', $checked=false, $x='', $y='', $js=false) {
tcpdf/tcpdf.php:12859:	public function ListBox($name, $w, $h, $values, $prop=array(), $opt=array(), $x='', $y='', $js=false) {
tcpdf/tcpdf.php:12945:	public function ComboBox($name, $w, $h, $values, $prop=array(), $opt=array(), $x='', $y='', $js=false) {
tcpdf/tcpdf.php:13032:	public function CheckBox($name, $w, $checked=false, $prop=array(), $opt=array(), $onvalue='Yes', $x='', $y='', $js=false) {
tcpdf/tcpdf.php:13112:	public function Button($name, $w, $h, $caption, $action, $prop=array(), $opt=array(), $x='', $y='', $js=false) {
tcpdf/tcpdf.php:13279:	protected function _putsignature() {
tcpdf/tcpdf.php:13367:	public function setUserRights(
tcpdf/tcpdf.php:13404:	public function setSignature($signing_cert='', $private_key='', $private_key_password='', $extracerts='', $cert_type=2, $info=array(), $approval='') {
tcpdf/tcpdf.php:13441:	public function setSignatureAppearance($x=0, $y=0, $w=0, $h=0, $page=-1, $name='') {
tcpdf/tcpdf.php:13457:	public function addEmptySignatureAppearance($x=0, $y=0, $w=0, $h=0, $page=-1, $name='') {
tcpdf/tcpdf.php:13475:	protected function getSignatureAppearanceArray($x=0, $y=0, $w=0, $h=0, $page=-1, $name='') {
tcpdf/tcpdf.php:13507:	public function setTimeStamp($tsa_host='', $tsa_username='', $tsa_password='', $tsa_cert='') {
tcpdf/tcpdf.php:13509:		if (!function_exists('curl_init')) {
tcpdf/tcpdf.php:13535:	protected function applyTSA($signature) {
tcpdf/tcpdf.php:13545:	 * NOTE: call this function before calling AddPage()
tcpdf/tcpdf.php:13550:	public function startPageGroup($page='') {
tcpdf/tcpdf.php:13563:	public function setStartingPageNumber($num=1) {
tcpdf/tcpdf.php:13574:	public function getAliasRightShift() {
tcpdf/tcpdf.php:13600:	public function getAliasNbPages() {
tcpdf/tcpdf.php:13615:	public function getAliasNumPage() {
tcpdf/tcpdf.php:13630:	public function getPageGroupAlias() {
tcpdf/tcpdf.php:13645:	public function getPageNumGroupAlias() {
tcpdf/tcpdf.php:13658:	public function getGroupPageNo() {
tcpdf/tcpdf.php:13668:	public function getGroupPageNoFormatted() {
tcpdf/tcpdf.php:13678:	public function PageNoFormatted() {
tcpdf/tcpdf.php:13687:	protected function _putocg() {
tcpdf/tcpdf.php:13715:	public function startLayer($name='', $print=true, $view=true, $lock=true) {
tcpdf/tcpdf.php:13735:	public function endLayer() {
tcpdf/tcpdf.php:13754:	public function setVisibility($v) {
tcpdf/tcpdf.php:13787:	protected function addExtGState($parms) {
tcpdf/tcpdf.php:13818:	protected function setExtGState($gs) {
tcpdf/tcpdf.php:13831:	protected function _putextgstates() {
tcpdf/tcpdf.php:13860:	public function setOverprint($stroking=true, $nonstroking='', $mode=0) {
tcpdf/tcpdf.php:13886:	public function getOverprint() {
tcpdf/tcpdf.php:13899:	public function setAlpha($stroking=1, $bm='Normal', $nonstroking='', $ais=false) {
tcpdf/tcpdf.php:13931:	public function getAlpha() {
tcpdf/tcpdf.php:13941:	public function setJPEGQuality($quality) {
tcpdf/tcpdf.php:13954:	public function setDefaultTableColumns($cols=4) {
tcpdf/tcpdf.php:13964:	public function setCellHeightRatio($h) {
tcpdf/tcpdf.php:13973:	public function getCellHeightRatio() {
tcpdf/tcpdf.php:13983:	public function setPDFVersion($version='1.7') {
tcpdf/tcpdf.php:14001:	public function setViewerPreferences($preferences) {
tcpdf/tcpdf.php:14018:	public function colorRegistrationBar($x, $y, $w, $h, $transition=true, $vertical=false, $colors='A,R,G,B,C,M,Y,K') {
tcpdf/tcpdf.php:14158:	public function cropMark($x, $y, $w, $h, $type='T,R,B,L', $color=array(100,100,100,100,'All')) {
tcpdf/tcpdf.php:14229:	public function registrationMark($x, $y, $r, $double=false, $cola=array(100,100,100,100,'All'), $colb=array(0,0,0,0,'None')) {
tcpdf/tcpdf.php:14256:	public function registrationMarkCMYK($x, $y, $r) {
tcpdf/tcpdf.php:14300:	public function LinearGradient($x, $y, $w, $h, $col1=array(), $col2=array(), $coords=array(0,0,1,0)) {
tcpdf/tcpdf.php:14318:	public function RadialGradient($x, $y, $w, $h, $col1=array(), $col2=array(), $coords=array(0.5,0.5,0.5,0.5,1)) {
tcpdf/tcpdf.php:14336:	 * @param $antialias (boolean) A flag indicating whether to filter the shading function to prevent aliasing artifacts.
tcpdf/tcpdf.php:14341:	public function CoonsPatchMesh($x, $y, $w, $h, $col1=array(), $col2=array(), $col3=array(), $col4=array(), $coords=array(0.00,0.0,0.33,0.00,0.67,0.00,1.00,0.00,1.00,0.33,1.00,0.67,1.00,1.00,0.67,1.00,0.33,1.00,0.00,1.00,0.00,0.67,0.00,0.33), $coords_min=0, $coords_max=1, $antialias=false) {
tcpdf/tcpdf.php:14433:	protected function Clip($x, $y, $w, $h) {
tcpdf/tcpdf.php:14453:	 * @param $stops (array) array gradient color components: color = array of GRAY, RGB or CMYK color components; offset = (0 to 1) represents a location along the gradient vector; exponent = exponent of the exponential interpolation function (default = 1).
tcpdf/tcpdf.php:14455:	 * @param $antialias (boolean) A flag indicating whether to filter the shading function to prevent aliasing artifacts.
tcpdf/tcpdf.php:14460:	public function Gradient($type, $coords, $stops, $background=array(), $antialias=false) {
tcpdf/tcpdf.php:14523:			// exponent for the exponential interpolation function
tcpdf/tcpdf.php:14567:	function _putshaders() {
tcpdf/tcpdf.php:14578:				$functions = '';
tcpdf/tcpdf.php:14585:					$functions .= ($fc + $i).' 0 R ';
tcpdf/tcpdf.php:14591:				$out .= ' /Functions ['.trim($functions).']';
tcpdf/tcpdf.php:14609:				// set transparency functions
tcpdf/tcpdf.php:14615:					$functions = '';
tcpdf/tcpdf.php:14619:						$functions .= ($ft + $i).' 0 R ';
tcpdf/tcpdf.php:14621:					$out .= ' /Functions ['.trim($functions).']';
tcpdf/tcpdf.php:14752:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:14759:	public function PieSector($xc, $yc, $r, $a, $b, $style='FD', $cw=true, $o=90) {
tcpdf/tcpdf.php:14772:	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
tcpdf/tcpdf.php:14780:	public function PieSectorXY($xc, $yc, $rx, $ry, $a, $b, $style='FD', $cw=false, $o=0, $nc=2) {
tcpdf/tcpdf.php:14824:	public function ImageEps($file, $x='', $y='', $w=0, $h=0, $link='', $useBoundingBox=true, $align='', $palign='', $border=0, $fitonpage=false, $fixoutvals=false) {
tcpdf/tcpdf.php:15143:	public function setBarcode($bc='') {
tcpdf/tcpdf.php:15153:	public function getBarcode() {
tcpdf/tcpdf.php:15187:	public function write1DBarcode($code, $type, $x='', $y='', $w='', $h='', $xres='', $style='', $align='') {
tcpdf/tcpdf.php:15506:	public function write2DBarcode($code, $type, $x='', $y='', $w='', $h='', $style='', $align='', $distort=false) {
tcpdf/tcpdf.php:15735:	public function getMargins() {
tcpdf/tcpdf.php:15762:	public function getOriginalMargins() {
tcpdf/tcpdf.php:15776:	public function getFontSize() {
tcpdf/tcpdf.php:15786:	public function getFontSizePt() {
tcpdf/tcpdf.php:15796:	public function getFontFamily() {
tcpdf/tcpdf.php:15806:	public function getFontStyle() {
tcpdf/tcpdf.php:15815:	 * @param $tidy_options (array) options for tidy_parse_string function
tcpdf/tcpdf.php:15822:	public function fixHTMLCode($html, $default_css='', $tagvs='', $tidy_options='') {
tcpdf/tcpdf.php:15833:	protected function getCSSBorderWidth($width) {
tcpdf/tcpdf.php:15853:	protected function getCSSBorderDashStyle($style) {
tcpdf/tcpdf.php:15889:	protected function getCSSBorderStyle($cssborder) {
tcpdf/tcpdf.php:15940:	public function getCSSPadding($csspadding, $width=0) {
tcpdf/tcpdf.php:15994:	public function getCSSMargin($cssmargin, $width=0) {
tcpdf/tcpdf.php:16048:	public function getCSSBorderMargin($cssbspace, $width=0) {
tcpdf/tcpdf.php:16082:	protected function getCSSFontSpacing($spacing, $parent=0) {
tcpdf/tcpdf.php:16113:	protected function getCSSFontStretching($stretch, $parent=100) {
tcpdf/tcpdf.php:16185:	public function getHTMLFontUnits($val, $refsize=12, $parent_size=12, $defaultunit='pt') {
tcpdf/tcpdf.php:16239:	protected function getHtmlDomArray($html) {
tcpdf/tcpdf.php:16990:					if (function_exists('mb_convert_case')) {
tcpdf/tcpdf.php:17027:	protected function getSpaceString() {
tcpdf/tcpdf.php:17041:	protected function getHashForTCPDFtagParams($data) {
tcpdf/tcpdf.php:17051:	public function serializeTCPDFtagParameters($data) {
tcpdf/tcpdf.php:17062:	protected function unserializeTCPDFtagParameters($data) {
tcpdf/tcpdf.php:17093:	public function writeHTMLCell($w, $h, $x, $y, $html='', $border=0, $ln=0, $fill=false, $reseth=true, $align='', $autopadding=true) {
tcpdf/tcpdf.php:17110:	public function writeHTML($html, $ln=true, $fill=false, $reseth=false, $cell=false, $align='') {
tcpdf/tcpdf.php:18667:	protected function openHTMLTagHandler($dom, $key, $cell) {
tcpdf/tcpdf.php:19337:	protected function closeHTMLTagHandler($dom, $key, $cell, $maxbottomliney=0) {
tcpdf/tcpdf.php:19884:	protected function addHTMLVertSpace($hbz=0, $hb=0, $cell=false, $firsttag=false, $lasttag=false) {
tcpdf/tcpdf.php:19910:	protected function getBorderStartPosition() {
tcpdf/tcpdf.php:19926:	protected function drawHTMLTagBorder($tag, $xmax) {
tcpdf/tcpdf.php:20128:	public function setLIsymbol($symbol='!') {
tcpdf/tcpdf.php:20151:	public function SetBooklet($booklet=true, $inner=-1, $outer=-1) {
tcpdf/tcpdf.php:20167:	protected function swapMargins($reverse=true) {
tcpdf/tcpdf.php:20191:	public function setHtmlVSpace($tagvs) {
tcpdf/tcpdf.php:20201:	public function setListIndentWidth($width) {
tcpdf/tcpdf.php:20211:	public function setOpenCell($isopen) {
tcpdf/tcpdf.php:20222:	public function setHtmlLinksStyle($color=array(0,0,255), $fontstyle='U') {
tcpdf/tcpdf.php:20237:	public function getHTMLUnitToUnits($htmlval, $refsize=1, $defaultunit='px', $points=false) {
tcpdf/tcpdf.php:20321:	protected function putHtmlListBullet($listdepth, $listtype='', $size=10) {
tcpdf/tcpdf.php:20523:	protected function getGraphicVars() {
tcpdf/tcpdf.php:20584:	protected function setGraphicVars($gvars, $extended=false) {
tcpdf/tcpdf.php:20648:	protected function _outSaveGraphicsState() {
tcpdf/tcpdf.php:20656:	protected function _outRestoreGraphicsState() {
tcpdf/tcpdf.php:20666:	protected function setBuffer($data) {
tcpdf/tcpdf.php:20677:	protected function replaceBuffer($data) {
tcpdf/tcpdf.php:20688:	protected function getBuffer() {
tcpdf/tcpdf.php:20700:	protected function setPageBuffer($page, $data, $append=false) {
tcpdf/tcpdf.php:20720:	protected function getPageBuffer($page) {
tcpdf/tcpdf.php:20735:	protected function setImageBuffer($image, $data) {
tcpdf/tcpdf.php:20753:	protected function setImageSubBuffer($image, $key, $data) {
tcpdf/tcpdf.php:20767:	protected function getImageBuffer($image) {
tcpdf/tcpdf.php:20781:	protected function setFontBuffer($font, $data) {
tcpdf/tcpdf.php:20800:	protected function setFontSubBuffer($font, $key, $data) {
tcpdf/tcpdf.php:20814:	protected function getFontBuffer($font) {
tcpdf/tcpdf.php:20829:	public function movePage($frompage, $topage) {
tcpdf/tcpdf.php:21000:	public function deletePage($page) {
tcpdf/tcpdf.php:21190:	public function copyPage($page=0) {
tcpdf/tcpdf.php:21267:	public function addTOC($page='', $numbersfont='', $filler='.', $toc_name='TOC', $style='', $color=array(0,0,0)) {
tcpdf/tcpdf.php:21477:	public function addHTMLTOC($page='', $toc_name='TOC', $templates=array(), $correct_align=true, $style='', $color=array(0,0,0)) {
tcpdf/tcpdf.php:21610:	public function startTransaction() {
tcpdf/tcpdf.php:21627:	public function commitTransaction() {
tcpdf/tcpdf.php:21641:	public function rollbackTransaction($self=false) {
tcpdf/tcpdf.php:21665:	public function setEqualColumns($numcols=0, $width=0, $y='') {
tcpdf/tcpdf.php:21697:	public function resetColumns() {
tcpdf/tcpdf.php:21710:	public function setColumnsArray($columns) {
tcpdf/tcpdf.php:21724:	public function selectColumn($col='') {
tcpdf/tcpdf.php:21803:	public function getColumn() {
tcpdf/tcpdf.php:21813:	public function getNumberOfColumns() {
tcpdf/tcpdf.php:21825:	public function setTextRenderingMode($stroke=0, $fill=true, $clip=false) {
tcpdf/tcpdf.php:21880:	public function setTextShadow($params=array('enabled'=>false, 'depth_w'=>0, 'depth_h'=>0, 'color'=>false, 'opacity'=>1, 'blend_mode'=>'Normal')) {
tcpdf/tcpdf.php:21922:	public function getTextShadow() {
tcpdf/tcpdf.php:21940:	protected function hyphenateWord($word, $patterns, $dictionary=array(), $leftmin=1, $rightmin=2, $charmin=1, $charmax=8) {
tcpdf/tcpdf.php:22020:	public function hyphenateText($text, $patterns, $dictionary=array(), $leftmin=1, $rightmin=2, $charmin=1, $charmax=8) {
tcpdf/tcpdf.php:22084:	public function setRasterizeVectorImages($mode) {
tcpdf/tcpdf.php:22095:	public function setFontSubsetting($enable=true) {
tcpdf/tcpdf.php:22110:	public function getFontSubsetting() {
tcpdf/tcpdf.php:22123:	public function stringLeftTrim($str, $replace='') {
tcpdf/tcpdf.php:22136:	public function stringRightTrim($str, $replace='') {
tcpdf/tcpdf.php:22149:	public function stringTrim($str, $replace='') {
tcpdf/tcpdf.php:22162:	public function isUnicodeFont() {
tcpdf/tcpdf.php:22174:	public function getFontFamilyName($fontfamily) {
tcpdf/tcpdf.php:22218:	public function startTemplate($w=0, $h=0, $group=false) {
tcpdf/tcpdf.php:22283:	public function endTemplate() {
tcpdf/tcpdf.php:22312:	public function printTemplate($id, $x='', $y='', $w=0, $h=0, $align='', $palign='', $fitonpage=false) {
tcpdf/tcpdf.php:22445:	public function setFontStretching($perc=100) {
tcpdf/tcpdf.php:22456:	public function getFontStretching() {
tcpdf/tcpdf.php:22467:	public function setFontSpacing($spacing=0) {
tcpdf/tcpdf.php:22478:	public function getFontSpacing() {
tcpdf/tcpdf.php:22490:	public function getPageRegions() {
tcpdf/tcpdf.php:22505:	public function setPageRegions($regions=array()) {
tcpdf/tcpdf.php:22525:	public function addPageRegion($region) {
tcpdf/tcpdf.php:22544:	public function removePageRegion($key) {
tcpdf/tcpdf.php:22562:	protected function checkPageRegions($h, $x, $y) {
tcpdf/tcpdf.php:22665:	public function ImageSVG($file, $x='', $y='', $w=0, $h=0, $link='', $align='', $palign='', $border=0, $fitonpage=false) {
tcpdf/tcpdf.php:22898:		// creates a new XML parser to be used by the other XML functions
tcpdf/tcpdf.php:22900:		// the following function allows to use parser inside object
tcpdf/tcpdf.php:22904:		// sets the element handler functions for the XML parser
tcpdf/tcpdf.php:22906:		// sets the character data handler function for the XML parser
tcpdf/tcpdf.php:22986:	protected function convertSVGtMatrix($tm) {
tcpdf/tcpdf.php:23006:	protected function SVGTransform($tm) {
tcpdf/tcpdf.php:23018:	 * @param $clip_function (string) clip function
tcpdf/tcpdf.php:23019:	 * @param $clip_params (array) array of parameters for clipping function
tcpdf/tcpdf.php:23025:	protected function setSVGStyles($svgstyle, $prevsvgstyle, $x=0, $y=0, $w=1, $h=1, $clip_function='', $clip_params=array()) {
tcpdf/tcpdf.php:23089:			if (!empty($clip_function) AND method_exists($this, $clip_function)) {
tcpdf/tcpdf.php:23090:				$bbox = call_user_func_array(array($this, $clip_function), $clip_params);
tcpdf/tcpdf.php:23320:	protected function SVGPath($d, $style='') {
tcpdf/tcpdf.php:23677:	protected function removeTagNamespace($name) {
tcpdf/tcpdf.php:23686:	 * Sets the opening SVG element handler function for the XML parser. (*** TO BE COMPLETED ***)
tcpdf/tcpdf.php:23695:	protected function startSVGElementHandler($parser, $name, $attribs, $ctm=array()) {
tcpdf/tcpdf.php:24355:	 * Sets the closing SVG element handler function for the XML parser.
tcpdf/tcpdf.php:24362:	protected function endSVGElementHandler($parser, $name) {
tcpdf/tcpdf.php:24462:	 * Sets the character data handler function for the XML parser.
tcpdf/tcpdf.php:24469:	protected function segSVGContentHandler($parser, $data) {
tcpdf/include/tcpdf_filters.php:67:	public static function getAvailableFilters() {
tcpdf/include/tcpdf_filters.php:79:	public static function decodeFilter($filter, $data) {
tcpdf/include/tcpdf_filters.php:138:	public static function decodeFilterStandard($data) {
tcpdf/include/tcpdf_filters.php:150:	public static function decodeFilterASCIIHexDecode($data) {
tcpdf/include/tcpdf_filters.php:190:	public static function decodeFilterASCII85Decode($data) {
tcpdf/include/tcpdf_filters.php:274:	public static function decodeFilterLZWDecode($data) {
tcpdf/include/tcpdf_filters.php:355:	public static function decodeFilterFlateDecode($data) {
tcpdf/include/tcpdf_filters.php:371:	public static function decodeFilterRunLengthDecode($data) {
tcpdf/include/tcpdf_filters.php:408:	public static function decodeFilterCCITTFaxDecode($data) {
tcpdf/include/tcpdf_filters.php:421:	public static function decodeFilterJBIG2Decode($data) {
tcpdf/include/tcpdf_filters.php:434:	public static function decodeFilterDCTDecode($data) {
tcpdf/include/tcpdf_filters.php:447:	public static function decodeFilterJPXDecode($data) {
tcpdf/include/tcpdf_filters.php:460:	public static function decodeFilterCrypt($data) {
tcpdf/include/tcpdf_filters.php:473:	public static function Error($msg) {
tcpdf/include/tcpdf_fonts.php:72:	public static function addTTFfont($fontfile, $fonttype='', $enc='', $flags=32, $outpath='', $platid=3, $encid=1, $addcbbox=false, $link=false) {
tcpdf/include/tcpdf_fonts.php:930:	public static function _getTTFtableChecksum($table, $length) {
tcpdf/include/tcpdf_fonts.php:952:	public static function _getTrueTypeFontSubset($font, $subsetchars) {
tcpdf/include/tcpdf_fonts.php:1397:	public static function _putfontwidths($font, $cidoffset=0) {
tcpdf/include/tcpdf_fonts.php:1506:	public static function updateCIDtoGIDmap($map, $cid, $gid) {
tcpdf/include/tcpdf_fonts.php:1522:	public static function _getfontpath() {
tcpdf/include/tcpdf_fonts.php:1543:	public static function getFontFullPath($file, $fontdir=false) {
tcpdf/include/tcpdf_fonts.php:1566:	public static function getFontRefSize($size, $refsize=12) {
tcpdf/include/tcpdf_fonts.php:1666:	public static function unichr($c, $unicode=true) {
tcpdf/include/tcpdf_fonts.php:1692:	public static function unichrUnicode($c) {
tcpdf/include/tcpdf_fonts.php:1702:	public static function unichrASCII($c) {
tcpdf/include/tcpdf_fonts.php:1744:	public static function arrUTF8ToUTF16BE($unicode, $setbom=false) {
tcpdf/include/tcpdf_fonts.php:1778:	public static function UTF8ArrayToUniArray($ta, $isunicode=true) {
tcpdf/include/tcpdf_fonts.php:1794:	public static function UTF8ArrSubString($strarr, $start='', $end='', $unicode=true) {
tcpdf/include/tcpdf_fonts.php:1817:	public static function UniArrSubString($uniarr, $start='', $end='') {
tcpdf/include/tcpdf_fonts.php:1839:	public static function UTF8ArrToLatin1Arr($unicode) {
tcpdf/include/tcpdf_fonts.php:1864:	public static function UTF8ArrToLatin1($unicode) {
tcpdf/include/tcpdf_fonts.php:1888:	public static function uniord($uch) {
tcpdf/include/tcpdf_fonts.php:1928:	public static function getUniord($uch) {
tcpdf/include/tcpdf_fonts.php:1929:		if (function_exists('mb_convert_encoding')) {
tcpdf/include/tcpdf_fonts.php:1997:	public static function UTF8StringToArray($str, $isunicode=true, &$currentfont) {
tcpdf/include/tcpdf_fonts.php:2019:	public static function UTF8ToLatin1($str, $isunicode=true, &$currentfont) {
tcpdf/include/tcpdf_fonts.php:2035:	public static function UTF8ToUTF16BE($str, $setbom=false, $isunicode=true, &$currentfont) {
tcpdf/include/tcpdf_fonts.php:2055:	public static function utf8StrRev($str, $setbom=false, $forcertl=false, $isunicode=true, &$currentfont) {
tcpdf/include/tcpdf_fonts.php:2072:	public static function utf8StrArrRev($arr, $str='', $setbom=false, $forcertl=false, $isunicode=true, &$currentfont) {
tcpdf/include/tcpdf_fonts.php:2088:	public static function utf8Bidi($ta, $str='', $forcertl=false, $isunicode=true, &$currentfont) {
tcpdf/include/tcpdf_colors.php:249:	public static function getSpotColor($name, &$spotc) {
tcpdf/include/tcpdf_colors.php:273:	public static function convertHTMLColorToDec($hcolor, &$spotc, $defcol=array('R'=>128,'G'=>128,'B'=>128)) {
tcpdf/include/tcpdf_colors.php:415:	public static function getColorStringFromArray($c) {
tcpdf/include/tcpdf_colors.php:446:	public static function _JScolor($color) {
tcpdf/include/tcpdf_images.php:64:	 * Return the image type given the file name or array returned by getimagesize() function.
tcpdf/include/tcpdf_images.php:66:	 * @param $iminfo (array) array of image information returned by getimagesize() function.
tcpdf/include/tcpdf_images.php:71:	public static function getImageFileType($imgfile, $iminfo=array()) {
tcpdf/include/tcpdf_images.php:99:	public static function setGDImageTransparency($new_image, $image) {
tcpdf/include/tcpdf_images.php:117:	 * This function requires GD library and write access to the directory defined on K_PATH_CACHE constant.
tcpdf/include/tcpdf_images.php:124:	public static function _toPNG($image, $tempfile) {
tcpdf/include/tcpdf_images.php:140:	 * This function requires GD library and write access to the directory defined on K_PATH_CACHE constant.
tcpdf/include/tcpdf_images.php:147:	public static function _toJPEG($image, $quality, $tempfile) {
tcpdf/include/tcpdf_images.php:162:	public static function _parsejpeg($file) {
tcpdf/include/tcpdf_images.php:245:	public static function _parsepng($file) {
tcpdf/include/barcodes/datamatrix.php:235:	public function __construct($code) {
tcpdf/include/barcodes/datamatrix.php:352:	public function getBarcodeArray() {
tcpdf/include/barcodes/datamatrix.php:366:	protected function getGFProduct($a, $b, $log, $alog, $gf) {
tcpdf/include/barcodes/datamatrix.php:384:	protected function getErrorCorrection($wd, $nb, $nd, $nc, $gf=256, $pp=301) {
tcpdf/include/barcodes/datamatrix.php:446:	protected function get253StateCodeword($cwpad, $cwpos) {
tcpdf/include/barcodes/datamatrix.php:461:	protected function get255StateCodeword($cwpad, $cwpos) {
tcpdf/include/barcodes/datamatrix.php:476:	protected function isCharMode($chr, $mode) {
tcpdf/include/barcodes/datamatrix.php:523:	protected function lookAheadTest($data, $pos, $mode) {
tcpdf/include/barcodes/datamatrix.php:653:	protected function getSwitchEncodingCodeword($mode) {
tcpdf/include/barcodes/datamatrix.php:692:	protected function getMaxDataCodewords($numcw) {
tcpdf/include/barcodes/datamatrix.php:707:	protected function getHighLevelEncoding($data) {
tcpdf/include/barcodes/datamatrix.php:983:	protected function placeModule($marr, $nrow, $ncol, $row, $col, $chr, $bit) {
tcpdf/include/barcodes/datamatrix.php:1008:	protected function placeUtah($marr, $nrow, $ncol, $row, $col, $chr) {
tcpdf/include/barcodes/datamatrix.php:1030:	protected function placeCornerA($marr, $nrow, $ncol, $chr) {
tcpdf/include/barcodes/datamatrix.php:1052:	protected function placeCornerB($marr, $nrow, $ncol, $chr) {
tcpdf/include/barcodes/datamatrix.php:1074:	protected function placeCornerC($marr, $nrow, $ncol, $chr) {
tcpdf/include/barcodes/datamatrix.php:1096:	protected function placeCornerD($marr, $nrow, $ncol, $chr) {
tcpdf/include/barcodes/datamatrix.php:1116:	protected function getPlacementMap($nrow, $ncol) {
tcpdf/include/barcodes/qrcode.php:127:	// QRcode has a function of an error correcting for miss reading that white is black.
tcpdf/include/barcodes/qrcode.php:253:if (!function_exists('str_split')) {
tcpdf/include/barcodes/qrcode.php:260:	function str_split($string, $split_length=1) {
tcpdf/include/barcodes/qrcode.php:639:	public function __construct($code, $eclevel = 'L') {
tcpdf/include/barcodes/qrcode.php:680:	public function getBarcodeArray() {
tcpdf/include/barcodes/qrcode.php:689:	protected function binarize($frame) {
tcpdf/include/barcodes/qrcode.php:704:	protected function encodeString($string) {
tcpdf/include/barcodes/qrcode.php:720:	protected function encodeMask($mask) {
tcpdf/include/barcodes/qrcode.php:786:	protected function setFrameAt($at, $val) {
tcpdf/include/barcodes/qrcode.php:795:	protected function getFrameAt($at) {
tcpdf/include/barcodes/qrcode.php:803:	protected function getNextPosition() {
tcpdf/include/barcodes/qrcode.php:859:	protected function init($spec) {
tcpdf/include/barcodes/qrcode.php:910:	protected function getCode() {
tcpdf/include/barcodes/qrcode.php:941:	 protected function writeFormatInformation($width, &$frame, $mask, $level) {
tcpdf/include/barcodes/qrcode.php:983:	 protected function mask0($x, $y) {
tcpdf/include/barcodes/qrcode.php:993:	 protected function mask1($x, $y) {
tcpdf/include/barcodes/qrcode.php:1003:	 protected function mask2($x, $y) {
tcpdf/include/barcodes/qrcode.php:1013:	 protected function mask3($x, $y) {
tcpdf/include/barcodes/qrcode.php:1023:	 protected function mask4($x, $y) {
tcpdf/include/barcodes/qrcode.php:1033:	 protected function mask5($x, $y) {
tcpdf/include/barcodes/qrcode.php:1043:	 protected function mask6($x, $y) {
tcpdf/include/barcodes/qrcode.php:1053:	 protected function mask7($x, $y) {
tcpdf/include/barcodes/qrcode.php:1064:	protected function generateMaskNo($maskNo, $width, $frame) {
tcpdf/include/barcodes/qrcode.php:1088:	 protected function makeMaskNo($maskNo, $width, $s, &$d, $maskGenOnly=false) {
tcpdf/include/barcodes/qrcode.php:1115:	 protected function makeMask($width, $frame, $maskNo, $level) {
tcpdf/include/barcodes/qrcode.php:1127:	 protected function calcN1N3($length) {
tcpdf/include/barcodes/qrcode.php:1158:	 protected function evaluateSymbol($width, $frame) {
tcpdf/include/barcodes/qrcode.php:1220:	 protected function mask($width, $frame, $level) {
tcpdf/include/barcodes/qrcode.php:1262:	 protected function isdigitat($str, $pos) {
tcpdf/include/barcodes/qrcode.php:1275:	 protected function isalnumat($str, $pos) {
tcpdf/include/barcodes/qrcode.php:1287:	 protected function identifyMode($pos) {
tcpdf/include/barcodes/qrcode.php:1312:	 protected function eatNum() {
tcpdf/include/barcodes/qrcode.php:1344:	 protected function eatAn() {
tcpdf/include/barcodes/qrcode.php:1383:	 protected function eatKanji() {
tcpdf/include/barcodes/qrcode.php:1396:	 protected function eat8() {
tcpdf/include/barcodes/qrcode.php:1445:	 protected function splitString() {
tcpdf/include/barcodes/qrcode.php:1484:	 protected function toUpper() {
tcpdf/include/barcodes/qrcode.php:1513:	 protected function newInputItem($mode, $size, $data, $bstream=null) {
tcpdf/include/barcodes/qrcode.php:1535:	 protected function encodeModeNum($inputitem, $version) {
tcpdf/include/barcodes/qrcode.php:1564:	 protected function encodeModeAn($inputitem, $version) {
tcpdf/include/barcodes/qrcode.php:1587:	 protected function encodeMode8($inputitem, $version) {
tcpdf/include/barcodes/qrcode.php:1603:	 protected function encodeModeKanji($inputitem, $version) {
tcpdf/include/barcodes/qrcode.php:1626:	 protected function encodeModeStructure($inputitem) {
tcpdf/include/barcodes/qrcode.php:1641:	 protected function encodeBitStream($inputitem, $version) {
tcpdf/include/barcodes/qrcode.php:1696:	protected function appendNewInputItem($items, $mode, $size, $data) {
tcpdf/include/barcodes/qrcode.php:1712:	 protected function insertStructuredAppendHeader($items, $size, $index, $parity) {
tcpdf/include/barcodes/qrcode.php:1730:	 protected function calcParity($items) {
tcpdf/include/barcodes/qrcode.php:1748:	 protected function checkModeNum($size, $data) {
tcpdf/include/barcodes/qrcode.php:1762:	protected function lookAnTable($c) {
tcpdf/include/barcodes/qrcode.php:1772:	 protected function checkModeAn($size, $data) {
tcpdf/include/barcodes/qrcode.php:1786:	 protected function estimateBitsModeNum($size) {
tcpdf/include/barcodes/qrcode.php:1807:	 protected function estimateBitsModeAn($size) {
tcpdf/include/barcodes/qrcode.php:1820:	 protected function estimateBitsMode8($size) {
tcpdf/include/barcodes/qrcode.php:1829:	 protected function estimateBitsModeKanji($size) {
tcpdf/include/barcodes/qrcode.php:1839:	 protected function checkModeKanji($size, $data) {
tcpdf/include/barcodes/qrcode.php:1859:	protected function check($mode, $size, $data) {
tcpdf/include/barcodes/qrcode.php:1892:	 protected function estimateBitStreamSize($items, $version) {
tcpdf/include/barcodes/qrcode.php:1935:	 protected function estimateVersion($items) {
tcpdf/include/barcodes/qrcode.php:1956:	 protected function lengthOfCode($mode, $version, $bits) {
tcpdf/include/barcodes/qrcode.php:2011:	 protected function createBitStream($items) {
tcpdf/include/barcodes/qrcode.php:2026:	 protected function convertData($items) {
tcpdf/include/barcodes/qrcode.php:2055:	 protected function appendPaddingBit($bstream) {
tcpdf/include/barcodes/qrcode.php:2088:	 protected function mergeBitStream($items) {
tcpdf/include/barcodes/qrcode.php:2105:	protected function getBitStream($items) {
tcpdf/include/barcodes/qrcode.php:2115:	protected function getByteStream($items) {
tcpdf/include/barcodes/qrcode.php:2129:	 protected function allocate($setLength) {
tcpdf/include/barcodes/qrcode.php:2139:	 protected function newFromNum($bits, $num) {
tcpdf/include/barcodes/qrcode.php:2159:	 protected function newFromBytes($size, $data) {
tcpdf/include/barcodes/qrcode.php:2183:	 protected function appendBitstream($bitstream, $append) {
tcpdf/include/barcodes/qrcode.php:2200:	 protected function appendNum($bitstream, $bits, $num) {
tcpdf/include/barcodes/qrcode.php:2215:	 protected function appendBytes($bitstream, $size, $data) {
tcpdf/include/barcodes/qrcode.php:2228:	 protected function bitstreamToByte($bstream) {
tcpdf/include/barcodes/qrcode.php:2273:	 protected function qrstrset($srctab, $x, $y, $repl, $replLen=false) {
tcpdf/include/barcodes/qrcode.php:2284:	protected function getDataLength($version, $level) {
tcpdf/include/barcodes/qrcode.php:2294:	protected function getECCLength($version, $level){
tcpdf/include/barcodes/qrcode.php:2303:	protected function getWidth($version) {
tcpdf/include/barcodes/qrcode.php:2312:	protected function getRemainder($version) {
tcpdf/include/barcodes/qrcode.php:2322:	protected function getMinimumVersion($size, $level) {
tcpdf/include/barcodes/qrcode.php:2339:	protected function lengthIndicator($mode, $version) {
tcpdf/include/barcodes/qrcode.php:2359:	protected function maximumWords($mode, $version) {
tcpdf/include/barcodes/qrcode.php:2385:	protected function getEccSpec($version, $level, $spec) {
tcpdf/include/barcodes/qrcode.php:2416:	protected function putAlignmentMarker($frame, $ox, $oy) {
tcpdf/include/barcodes/qrcode.php:2439:	 protected function putAlignmentPattern($version, $frame, $width) {
tcpdf/include/barcodes/qrcode.php:2479:	protected function getVersionPattern($version) {
tcpdf/include/barcodes/qrcode.php:2492:	protected function getFormatInfo($mask, $level) {
tcpdf/include/barcodes/qrcode.php:2509:	protected function putFinderPattern($frame, $ox, $oy) {
tcpdf/include/barcodes/qrcode.php:2530:	protected function createFrame($version) {
tcpdf/include/barcodes/qrcode.php:2595:	protected function newFrame($version) {
tcpdf/include/barcodes/qrcode.php:2613:	 protected function rsBlockNum($spec) {
tcpdf/include/barcodes/qrcode.php:2622:	 protected function rsBlockNum1($spec) {
tcpdf/include/barcodes/qrcode.php:2631:	 protected function rsDataCodes1($spec) {
tcpdf/include/barcodes/qrcode.php:2640:	 protected function rsEccCodes1($spec) {
tcpdf/include/barcodes/qrcode.php:2649:	 protected function rsBlockNum2($spec) {
tcpdf/include/barcodes/qrcode.php:2658:	 protected function rsDataCodes2($spec) {
tcpdf/include/barcodes/qrcode.php:2667:	 protected function rsEccCodes2($spec) {
tcpdf/include/barcodes/qrcode.php:2676:	 protected function rsDataLength($spec) {
tcpdf/include/barcodes/qrcode.php:2685:	 protected function rsEccLength($spec) {
tcpdf/include/barcodes/qrcode.php:2703:	 protected function init_rs($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) {
tcpdf/include/barcodes/qrcode.php:2726:	 protected function modnn($rs, $x) {
tcpdf/include/barcodes/qrcode.php:2744:	protected function init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) {
tcpdf/include/barcodes/qrcode.php:2828:	 protected function encode_rs_char($rs, $data, $parity) {
tcpdf/include/barcodes/pdf417.php:532:	public function __construct($code, $ecl=-1, $aspectratio=2, $macro=array()) {
tcpdf/include/barcodes/pdf417.php:731:	public function getBarcodeArray() {
tcpdf/include/barcodes/pdf417.php:742:	protected function getErrorCorrectionLevel($ecl, $numcw) {
tcpdf/include/barcodes/pdf417.php:780:	protected function getErrorCorrection($cw, $ecl) {
tcpdf/include/barcodes/pdf417.php:816:	protected function getInputSequences($code) {
tcpdf/include/barcodes/pdf417.php:873:	protected function getCompaction($mode, $code, $addmode=true) {
tcpdf/include/tcpdf_static.php:117:	public static function getTCPDFVersion() {
tcpdf/include/tcpdf_static.php:127:	public static function getTCPDFProducer() {
tcpdf/include/tcpdf_static.php:132:	 * Sets the current active configuration setting of magic_quotes_runtime (if the set_magic_quotes_runtime function exist)
tcpdf/include/tcpdf_static.php:137:	public static function set_mqr($mqr) {
tcpdf/include/tcpdf_static.php:148:	 * Gets the current active configuration setting of magic_quotes_runtime (if the get_magic_quotes_runtime function exist)
tcpdf/include/tcpdf_static.php:153:	public static function get_mqr() {
tcpdf/include/tcpdf_static.php:171:	public static function isValidURL($url) {
tcpdf/include/tcpdf_static.php:193:	public static function removeSHY($txt='', $unicode=true) {
tcpdf/include/tcpdf_static.php:211:	public static function getBorderMode($brd, $position='start', $opencell=true) {
tcpdf/include/tcpdf_static.php:283:	public static function empty_string($str) {
tcpdf/include/tcpdf_static.php:295:	public static function getObjFilename($type='tmp', $file_id='') {
tcpdf/include/tcpdf_static.php:305:	public static function _escape($s) {
tcpdf/include/tcpdf_static.php:317:	public static function _escapeXML($str) {
tcpdf/include/tcpdf_static.php:330:	public static function objclone($object) {
tcpdf/include/tcpdf_static.php:345:	public static function sendOutputData($data, $length) {
tcpdf/include/tcpdf_static.php:361:	public static function replacePageNumAliases($page, $replace, $diff=0) {
tcpdf/include/tcpdf_static.php:380:	public static function getTimestamp($date) {
tcpdf/include/tcpdf_static.php:395:	public static function getFormattedDate($time) {
tcpdf/include/tcpdf_static.php:407:	public static function getRandomSeed($seed='') {
tcpdf/include/tcpdf_static.php:409:		if (function_exists('posix_getpid')) {
tcpdf/include/tcpdf_static.php:412:		if (function_exists('openssl_random_pseudo_bytes') AND (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN')) {
tcpdf/include/tcpdf_static.php:430:	public static function _md5_16($str) {
tcpdf/include/tcpdf_static.php:444:	public static function _AES($key, $text) {
tcpdf/include/tcpdf_static.php:469:	public static function _AESnopad($key, $text) {
tcpdf/include/tcpdf_static.php:492:	public static function _RC4($key, $text, &$last_enc_key, &$last_enc_key_c) {
tcpdf/include/tcpdf_static.php:493:		if (function_exists('mcrypt_encrypt') AND ($out = @mcrypt_encrypt(MCRYPT_ARCFOUR, $key, $text, MCRYPT_MODE_STREAM, ''))) {
tcpdf/include/tcpdf_static.php:494:			// try to use mcrypt function if exist
tcpdf/include/tcpdf_static.php:536:	public static function getUserPermissionCode($permissions, $mode=0) {
tcpdf/include/tcpdf_static.php:573:	public static function convertHexStringToString($bs) {
tcpdf/include/tcpdf_static.php:595:	public static function convertStringToHexString($s) {
tcpdf/include/tcpdf_static.php:612:	public static function getEncPermissionsString($protection) {
tcpdf/include/tcpdf_static.php:629:	public static function encodeNameObject($name) {
tcpdf/include/tcpdf_static.php:653:	public static function getAnnotOptFromJSProp($prop, &$spot_colors, $rtl=false) {
tcpdf/include/tcpdf_static.php:1019:	public static function formatPageNumber($num) {
tcpdf/include/tcpdf_static.php:1031:	public static function formatTOCPageNumber($num) {
tcpdf/include/tcpdf_static.php:1043:	public static function extractCSSproperties($cssdata) {
tcpdf/include/tcpdf_static.php:1131:	 * @param $tidy_options (array) options for tidy_parse_string function
tcpdf/include/tcpdf_static.php:1139:	public static function fixHTMLCode($html, $default_css='', $tagvs='', $tidy_options='', &$tagvspaces) {
tcpdf/include/tcpdf_static.php:1205:	public static function isValidCSSSelectorForTag($dom, $key, $selector) {
tcpdf/include/tcpdf_static.php:1365:	public static function getCSSdataArray($dom, $key, $css) {
tcpdf/include/tcpdf_static.php:1410:	public static function getTagStyleFromCSSarray($css) {
tcpdf/include/tcpdf_static.php:1441:	public static function intToRoman($number) {
tcpdf/include/tcpdf_static.php:1507:	public static function revstrpos($haystack, $needle, $offset = 0) {
tcpdf/include/tcpdf_static.php:1522:	public static function getHyphenPatternsFromTEX($file) {
tcpdf/include/tcpdf_static.php:1568:	public static function getPathPaintOperator($style, $default='S') {
tcpdf/include/tcpdf_static.php:1647:	public static function getTransformationMatrixProduct($ta, $tb) {
tcpdf/include/tcpdf_static.php:1666:	public static function getSVGTransformMatrix($attribute) {
tcpdf/include/tcpdf_static.php:1763:	public static function getVectorsAngle($x1, $y1, $x2, $y2) {
tcpdf/include/tcpdf_static.php:1812:	 * This is a wrapper for the preg_split function to avoid the bug: https://bugs.php.net/bug.php?id=45850
tcpdf/include/tcpdf_static.php:1817:	 * @param $flags (int) The flags as specified on the preg_split PHP function.
tcpdf/include/tcpdf_static.php:1823:	public static function pregSplit($pattern, $modifiers, $subject, $limit=NULL, $flags=NULL) {
tcpdf/include/tcpdf_static.php:1848:	public static function fopenLocal($filename, $mode) {
tcpdf/include/tcpdf_static.php:1861:	 * @return The function returns the read data or FALSE on failure. 
tcpdf/include/tcpdf_static.php:1866:	public static function fileGetContents($file) {
tcpdf/include/tcpdf_static.php:1925:				&& function_exists('curl_init')
tcpdf/include/tcpdf_static.php:1963:	public static function _getULONG($str, $offset) {
tcpdf/include/tcpdf_static.php:1977:	public static function _getUSHORT($str, $offset) {
tcpdf/include/tcpdf_static.php:1991:	public static function _getSHORT($str, $offset) {
tcpdf/include/tcpdf_static.php:2005:	public static function _getFWORD($str, $offset) {
tcpdf/include/tcpdf_static.php:2022:	public static function _getUFWORD($str, $offset) {
tcpdf/include/tcpdf_static.php:2036:	public static function _getFIXED($str, $offset) {
tcpdf/include/tcpdf_static.php:2054:	public static function _getBYTE($str, $offset) {
tcpdf/include/tcpdf_static.php:2068:	public static function rfread($handle, $length) {
tcpdf/include/tcpdf_static.php:2086:	public static function _freadint($f) {
tcpdf/include/tcpdf_static.php:2456:	public static function getPageSizeFromFormat($format) {
tcpdf/include/tcpdf_static.php:2478:	public static function setPageBoxes($page, $type, $llx, $lly, $urx, $ury, $points=false, $k, $pagedim=array()) {
tcpdf/include/tcpdf_static.php:2504:	public static function swapPageBoxCoordinates($page, $pagedim) {
tcpdf/include/tcpdf_static.php:2525:	public static function getPageLayoutMode($layout='SinglePage') {
tcpdf/include/tcpdf_static.php:2568:	public static function getPageMode($mode='UseNone') {
tcpdf/CHANGELOG.TXT:54:	- Fixed bug with the register_shutdown_function().
tcpdf/CHANGELOG.TXT:137:	- Bug item #921 "Fatal error in hyphenateText() function" was fixed.
tcpdf/CHANGELOG.TXT:257:	- preg_replace_callback functions were replaced to improve memory performances.
tcpdf/CHANGELOG.TXT:353:	- The bug caused by the preg_split function on some PHP 5.2.x versions was fixed.
tcpdf/CHANGELOG.TXT:360:	- The exceptions raised by file_exists() function were suppressed.
tcpdf/CHANGELOG.TXT:441:	- objclone function was patched to support old imagick extensions.
tcpdf/CHANGELOG.TXT:726:	- Bug item #3426167 "bug in function convertHTMLColorToDec()" was fixed.
tcpdf/CHANGELOG.TXT:933:	- SetLineStyle() function was improved.
tcpdf/CHANGELOG.TXT:982:	- Bug item #3213488 "wrong function call in function Write" was fixed.
tcpdf/CHANGELOG.TXT:1145:	- Image function now accepts image data streams (check example n. 9).
tcpdf/CHANGELOG.TXT:1343:	- All trimming functions were replaced with stringLeftTrim(), stringRightTrim() and stringTrim().
tcpdf/CHANGELOG.TXT:1391:	- Bug item #3025772 "Borders in all image functions are still flawed" was fixed.
tcpdf/CHANGELOG.TXT:1637:	- The usage of tcpdf tag in HTML mode was changed to remove the possible security flaw offered by the eval() function (thanks to Matthias Hecker for spotting this security problem). See the new example n. 49 for further information.
tcpdf/CHANGELOG.TXT:1655:	- Patch #2978349 "$ignore_min_height is ignored in function Cell()" was applied.
tcpdf/CHANGELOG.TXT:1883:	- Signature functions were improved but not yet fixed (tcpdf.crt and example n. 52 were updated).
tcpdf/CHANGELOG.TXT:1989:	- Some error caused by 'empty' function were fixed.
tcpdf/CHANGELOG.TXT:2106:	- addTOC() function bug was fixed.
tcpdf/CHANGELOG.TXT:2109:	- The following bug was fixed: "function removeSHY corrupts unicode".
tcpdf/CHANGELOG.TXT:2128:	- Bug item #2612553 "function Write() must not break a line on &nbsp;  character" was fixed.
tcpdf/CHANGELOG.TXT:2175:	- addTOC() function was improved (see example n. 45).
tcpdf/CHANGELOG.TXT:2178:	- The signature of startPageGroup() function was changed.
tcpdf/CHANGELOG.TXT:2220:	- Problem of Multicell() on Header function (Bug item #2407579) was fixed.
tcpdf/CHANGELOG.TXT:2233:	- Font functions were optimized to reduce document size.
tcpdf/CHANGELOG.TXT:2252:	- AddFont() function now support custom font file path on $file parameter.
tcpdf/CHANGELOG.TXT:2271:	- Some functions were optimized.
tcpdf/CHANGELOG.TXT:2284:	- The function setOpenCell() was added to set the top/bottom cell sides to be open or closed when the cell cross the page.
tcpdf/CHANGELOG.TXT:2297:	- The function setListIndentWidth() was added to set custom indentation widht for HTML lists.
tcpdf/CHANGELOG.TXT:2316:	- Write() function was improved to support margin changes.
tcpdf/CHANGELOG.TXT:2319:	- setHtmlVSpace($tagvs) function was added to set custom vertical spaces for HTML tags.
tcpdf/CHANGELOG.TXT:2320:	- writeHTML() function now support margin changes during execution.
tcpdf/CHANGELOG.TXT:2321:	- Signature of addHTMLVertSpace() function is changed.
tcpdf/CHANGELOG.TXT:2325:	- ImageEps() function was improved in performances.
tcpdf/CHANGELOG.TXT:2326:	- Signature of Link() And Annotation() functions were changed.
tcpdf/CHANGELOG.TXT:2329:	- Booklet mode for double-sided pages was added; see SetBooklet() function and example n. 40.
tcpdf/CHANGELOG.TXT:2331:	- Signature of Write() function is changed.
tcpdf/CHANGELOG.TXT:2333:	- Some functions were fixed to better support RTL mode.
tcpdf/CHANGELOG.TXT:2352:	- Some functions were modified to better support UTF-8 extensions to core fonts.
tcpdf/CHANGELOG.TXT:2358:	- The "false" parameter was reintroduced to class_exists function on PHP5 version to avoid autoload.
tcpdf/CHANGELOG.TXT:2359:	- addHtmlLink() function was improved to support internal links (i.e.: <a href="#23">link to page 23</a>).
tcpdf/CHANGELOG.TXT:2365:	- SetX() and SetY() functions were improved.
tcpdf/CHANGELOG.TXT:2379:	- _putbookmarks() function was fixed.
tcpdf/CHANGELOG.TXT:2396:	- convertHTMLColorToDec() function was improved to support rgb(RR,GG,BB) notation.
tcpdf/CHANGELOG.TXT:2401:	- _putcidfont0 function was improved to include CJK fonts (Chinese, Japanese, Korean, CJK, Asian fonts) without embedding.
tcpdf/CHANGELOG.TXT:2406:	- "stripos" function was replaced with "strpos + strtolower" for backward compatibility with PHP4.
tcpdf/CHANGELOG.TXT:2407:	- support for Spot Colors were added. Check the new example n. 37 and the following new functions:
tcpdf/CHANGELOG.TXT:2413:	- Bookmark() function was improved to fix wrong levels.
tcpdf/CHANGELOG.TXT:2426:	- HTTP headers were fixed on Output function().
tcpdf/CHANGELOG.TXT:2427:	- getAliasNbPages() and getPageGroupAlias() functions were changed to support non-unicode fonts on unicode documents.
tcpdf/CHANGELOG.TXT:2440:	- Annotation() function was added to support some PDF annotations (see example_036.php and section 8.4 of PDF reference 1.7).
tcpdf/CHANGELOG.TXT:2442:	- function getAliasNbPages() was added and Footer() was updated.
tcpdf/CHANGELOG.TXT:2445:	- ImageEPS() function was improved and RTL alignment was fixed (see example_032.php).
tcpdf/CHANGELOG.TXT:2448:	- Missing CNZ and CEO style modes were added to Rect() function.
tcpdf/CHANGELOG.TXT:2450:	- getLastH() function was added.
tcpdf/CHANGELOG.TXT:2453:	- setPageMark() function was added. This function must be called after calling Image() function for a background image.
tcpdf/CHANGELOG.TXT:2456:	- Some functions were changed to support different page formats (see example_028.php).
tcpdf/CHANGELOG.TXT:2457:	- The signature of setPage() function is changed.
tcpdf/CHANGELOG.TXT:2465:	- Stroke mode was fixed on Text function.
tcpdf/CHANGELOG.TXT:2474:	- Addpage(), Header() and Footer() functions were changed to simplify the implementation of external header/footer functions.
tcpdf/CHANGELOG.TXT:2475:	- The following functions were added:
tcpdf/CHANGELOG.TXT:2496:	- Header() and Footer() functions were updated to preserve previous settings.
tcpdf/CHANGELOG.TXT:2500:	- UTF8StringToArray() function was fixed for non-unicode mode.
tcpdf/CHANGELOG.TXT:2509:	- Clipping mode was added to all graphic functions by using parameter $style = "CNZ" or "CEO" (see example_034.php).
tcpdf/CHANGELOG.TXT:2514:	- WriteHTML() function was improved.
tcpdf/CHANGELOG.TXT:2524:	- Removed URL encoding when F option is selected on Output() function.
tcpdf/CHANGELOG.TXT:2535:	- Signature fo SetTextColor() and SetFillColor() functions was changed (parameter $storeprev was removed).
tcpdf/CHANGELOG.TXT:2541:	- The following functions were added: getMargins(), getFontSize(), getFontSizePt().
tcpdf/CHANGELOG.TXT:2543:	- Multicell and WriteHTMLCell fill function was fixed.
tcpdf/CHANGELOG.TXT:2560:	- LinearGradient(), RadialGradient(), CoonsPatchMesh() functions were added to print various color gradients (see example 30).
tcpdf/CHANGELOG.TXT:2561:	- PieSector() function was added to render render pie charts (see example 31).
tcpdf/CHANGELOG.TXT:2563:	- writeBarcode() function is now depracated, a new write1DBarcode() function was added. The barcode directory was removed and a new barcodes.php file was added.
tcpdf/CHANGELOG.TXT:2564:	- The new write1DBarcode() function support more barcodes and do not need the GD library (see example 027). All barcodes are directly written to PDF using graphic functions.
tcpdf/CHANGELOG.TXT:2568:	- graphics functions were fixed.
tcpdf/CHANGELOG.TXT:2576:	- AddPage() function signature is changed to include page format.
tcpdf/CHANGELOG.TXT:2578:	- setPageUnit() function was added to change the page units of measure.
tcpdf/CHANGELOG.TXT:2579:	- setPageFormat() function was added to change the page format and orientation between pages.
tcpdf/CHANGELOG.TXT:2580:	- setPageOrientation() function was added to change the page orientation.
tcpdf/CHANGELOG.TXT:2585:	- setDefaultTableColumns() function was added.
tcpdf/CHANGELOG.TXT:2587:	- setCellHeightRatio() function was added to define the default height of cell repect font height.
tcpdf/CHANGELOG.TXT:2598:	- TranslateY() function was fixed (bug [1977962]).
tcpdf/CHANGELOG.TXT:2599:	- setVisibility() function was fixed.
tcpdf/CHANGELOG.TXT:2600:	- writeBarcode() function was fixed to scale using $xref parameter.
tcpdf/CHANGELOG.TXT:2604:	- CMYK color support was added to all graphic functions.
tcpdf/CHANGELOG.TXT:2611:	- fixed $laa_array inclusion on utf8Bidi() function.
tcpdf/CHANGELOG.TXT:2619:	- Polycurve() function was added to draw a poly-Bezier curve.
tcpdf/CHANGELOG.TXT:2632:	- back-Slash character escape was fixed on writeHTML() function.
tcpdf/CHANGELOG.TXT:2643:	- Write() functions now return the number of cells and not the number of lines.
tcpdf/CHANGELOG.TXT:2648:	- function writeBarcode() was fixed.
tcpdf/CHANGELOG.TXT:2653:	- private function pixelsToMillimeters() was changed to public function pixelsToUnits() to fix html image size bug.
tcpdf/CHANGELOG.TXT:2654:	- Image-related functions were rewritten.
tcpdf/CHANGELOG.TXT:2659:	- setVisibility() function was added to restrict the rendering of some elements to screen or printout (see example 24).
tcpdf/CHANGELOG.TXT:2660:	- All private variables and functions were changed to protected.
tcpdf/CHANGELOG.TXT:2661:	- setAlpha() function was added to give transparency support for all objects (see example 25).
tcpdf/CHANGELOG.TXT:2662:	- Clipping and stroke modes were added to Text() function (see example 26).
tcpdf/CHANGELOG.TXT:2664:	- function setJPEGQuality() was added to set the JPEG image comrpession (see example 9).
tcpdf/CHANGELOG.TXT:2669:	- private function convertColorHexToDec() was renamed convertHTMLColorToDec().
tcpdf/CHANGELOG.TXT:2671:	- Write() function were fixed.
tcpdf/CHANGELOG.TXT:2673:	- private function setUserRights() was added to release user rights on Acrobat Reader (this allows to display forms, see example 14)
tcpdf/CHANGELOG.TXT:2707:	- Some functions were added: GetArrStringWidth(), GetCharWidth(), uniord(), utf8Bidi().
tcpdf/CHANGELOG.TXT:2714:	- The following functions were added: UTF8ArrSubString() and unichr().
tcpdf/CHANGELOG.TXT:2724:	- RadioButton and ListBox functions were added.
tcpdf/CHANGELOG.TXT:2725:	- javascript form functions were rewritten and properties names are changed. The properties function supported by form fields are listed on Possible values are listed on http://www.adobe.com/devnet/acrobat/pdfs/js_developer_guide.pdf.
tcpdf/CHANGELOG.TXT:2729:	- Legacy image functions were reintroduced to allow PNG and JPEG support without GD library.
tcpdf/CHANGELOG.TXT:2739:	- Justify function was fixed on PHP4 version.
tcpdf/CHANGELOG.TXT:2740:	- Bookmank function was added ([1578250] Table of contents).
tcpdf/CHANGELOG.TXT:2744:	- The bug "[1885776] Race Condition in function justitfy" was fixed.
tcpdf/CHANGELOG.TXT:2750:	- SetLeftMargin, SetTopMargin, SetRightMargin functions were fixed.
tcpdf/CHANGELOG.TXT:2751:	- SetCellPadding function was added.
tcpdf/CHANGELOG.TXT:2753:	- Text function was fixed.
tcpdf/CHANGELOG.TXT:2754:	- MultiCell function was fixed, now works also across multiple pages.
tcpdf/CHANGELOG.TXT:2755:	- Line width was fixed on Header and Footer functions and <hr> tag.
tcpdf/CHANGELOG.TXT:2758:	- _begindoc() function was fixed.
tcpdf/CHANGELOG.TXT:2760:	- The following functions were added:
tcpdf/CHANGELOG.TXT:2766:	- $stretch parameter was added to Cell() function to fit text on cell:
tcpdf/CHANGELOG.TXT:2772:	- Line function was fixed for RTL.
tcpdf/CHANGELOG.TXT:2773:	- Graphic transformation functions were added [1811158]:
tcpdf/CHANGELOG.TXT:2791:	- Graphic function were added/updated [1688549]:
tcpdf/CHANGELOG.TXT:2812:	- Image function now has a new "align" parameter that indicates the alignment of the pointer next to image insertion and relative to image height. The value can be:
tcpdf/CHANGELOG.TXT:2830:	- MultiCell() function returns the number of cells.
tcpdf/CHANGELOG.TXT:2843:	- ToUnicode CMap were added on _puttruetypeunicode function. Now you may search and copy unicode text.
tcpdf/CHANGELOG.TXT:2852:	- MultiCell function signature were changed: the $ln parameter were added. Check documentation for further information.
tcpdf/CHANGELOG.TXT:2854:	- setPrintHeader() and setPrintFooter() functions were added to enable or disable page header and footer.
tcpdf/CHANGELOG.TXT:2861:	- writeHTML function call were fixed on examples.
tcpdf/CHANGELOG.TXT:2868:	- getPageHeight() function were fixed (bug 1543476).
tcpdf/CHANGELOG.TXT:2869:	- fixed missing breaks on closedHTMLTagHandler function (bug 1535263).
tcpdf/CHANGELOG.TXT:2870:	- fixed extra spaces on Write function (bug 1535262).
tcpdf/CHANGELOG.TXT:2895:	- parameter $fill were added on Write, writeHTML and writeHTMLCell functions.
tcpdf/CHANGELOG.TXT:2915:	- SetFont function were fixed (thank Sjaak Lauwers for bug notice).
tcpdf/CHANGELOG.TXT:2918:	- the html functions were improved (thanks to Manfred Vervuert for bug reporting).
tcpdf/CHANGELOG.TXT:2941:	- Now the AddFont and SetFont functions returns the basic font if the styled version do not exist.
tcpdf/config/tcpdf_config.php:221: * Default timezone for datetime functions
tcpdf/examples/example_014.php:164:// Form validation functions
tcpdf/examples/example_014.php:166:function CheckField(name,message) {
tcpdf/examples/example_014.php:175:function Print() {
tcpdf/examples/example_003.php:35:	public function Header() {
tcpdf/examples/example_003.php:46:	public function Footer() {
tcpdf/examples/example_011.php:30:// extend TCPF with custom functions
tcpdf/examples/example_011.php:34:	public function LoadData($file) {
tcpdf/examples/example_011.php:45:	public function ColoredTable($header,$data) {
tcpdf/examples/index.php:75:<li>Javascript functions: [<a href="example_053.php" title="PDF [new window]" target="_blank">PDF</a>]</li>
tcpdf/examples/example_020.php:31:// extend TCPF with custom functions
tcpdf/examples/example_020.php:34:	public function MultiRow($left, $right) {
tcpdf/examples/example_010.php:44:	public function PrintChapter($num, $title, $file, $mode=false) {
tcpdf/examples/example_010.php:63:	public function ChapterTitle($num, $title) {
tcpdf/examples/example_010.php:76:	public function ChapterBody($file, $mode=false) {
tcpdf/examples/example_049.php:8://               WriteHTML with TCPDF callback functions
tcpdf/examples/example_049.php:22: * @abstract TCPDF - Example: WriteHTML with TCPDF callback functions
tcpdf/examples/example_034.php:75:$pdf->Write(0, 'Image Clipping using geometric functions', '', 0, 'C', 1, 0, false, false, 0);
tcpdf/examples/example_059.php:39:	public function Header() {
tcpdf/examples/example_059.php:53:	public function Footer() {
tcpdf/examples/example_051.php:34:	public function Header() {
tcpdf/tcpdf_barcodes_1d.php:73:	public function __construct($code, $type) {
tcpdf/tcpdf_barcodes_1d.php:82:	public function getBarcodeArray() {
tcpdf/tcpdf_barcodes_1d.php:93:	public function getBarcodeSVG($w=2, $h=30, $color='black') {
tcpdf/tcpdf_barcodes_1d.php:114:	public function getBarcodeSVGcode($w=2, $h=30, $color='black') {
tcpdf/tcpdf_barcodes_1d.php:147:	public function getBarcodeHTML($w=2, $h=30, $color='black') {
tcpdf/tcpdf_barcodes_1d.php:172:	public function getBarcodePNG($w=2, $h=30, $color=array(0,0,0)) {
tcpdf/tcpdf_barcodes_1d.php:192:	public function getBarcodePngData($w=2, $h=30, $color=array(0,0,0)) {
tcpdf/tcpdf_barcodes_1d.php:196:		if (function_exists('imagecreate')) {
tcpdf/tcpdf_barcodes_1d.php:249:	public function setBarcode($code, $type) {
tcpdf/tcpdf_barcodes_1d.php:393:	protected function barcode_code39($code, $extended=false, $checksum=false) {
tcpdf/tcpdf_barcodes_1d.php:486:	protected function encode_code39_ext($code) {
tcpdf/tcpdf_barcodes_1d.php:537:	protected function checksum_code39($code) {
tcpdf/tcpdf_barcodes_1d.php:560:	protected function barcode_code93($code) {
tcpdf/tcpdf_barcodes_1d.php:688:	protected function checksum_code93($code) {
tcpdf/tcpdf_barcodes_1d.php:737:	protected function checksum_s25($code) {
tcpdf/tcpdf_barcodes_1d.php:763:	protected function barcode_msi($code, $checksum=false) {
tcpdf/tcpdf_barcodes_1d.php:822:	protected function barcode_s25($code, $checksum=false) {
tcpdf/tcpdf_barcodes_1d.php:864:	protected function binseq_to_array($seq, $bararray) {
tcpdf/tcpdf_barcodes_1d.php:894:	protected function barcode_i25($code, $checksum=false) {
tcpdf/tcpdf_barcodes_1d.php:958:	protected function barcode_c128($code, $type='') {
tcpdf/tcpdf_barcodes_1d.php:1288:	protected function get128ABsequence($code) {
tcpdf/tcpdf_barcodes_1d.php:1327:	protected function barcode_eanupc($code, $len=13) {
tcpdf/tcpdf_barcodes_1d.php:1520:	protected function barcode_eanext($code, $len=5) {
tcpdf/tcpdf_barcodes_1d.php:1595:	protected function barcode_postnet($code, $planet=false) {
tcpdf/tcpdf_barcodes_1d.php:1668:	protected function barcode_rms4cc($code, $kix=false) {
tcpdf/tcpdf_barcodes_1d.php:1819:	protected function barcode_codabar($code) {
tcpdf/tcpdf_barcodes_1d.php:1875:	protected function barcode_code11($code) {
tcpdf/tcpdf_barcodes_1d.php:1966:	protected function barcode_pharmacode($code) {
tcpdf/tcpdf_barcodes_1d.php:1992:	protected function barcode_pharmacode2t($code) {
tcpdf/tcpdf_barcodes_1d.php:2049:	 * The fields are described as follows:<ul><li>The Barcode Identifier shall be assigned by USPS to encode the presort identification that is currently printed in human readable form on the optional endorsement line (OEL) as well as for future USPS use. This shall be two digits, with the second digit in the range of 0–4. The allowable encoding ranges shall be 00–04, 10–14, 20–24, 30–34, 40–44, 50–54, 60–64, 70–74, 80–84, and 90–94.</li><li>The Service Type Identifier shall be assigned by USPS for any combination of services requested on the mailpiece. The allowable encoding range shall be 000http://it2.php.net/manual/en/function.dechex.php–999. Each 3-digit value shall correspond to a particular mail class with a particular combination of service(s). Each service program, such as OneCode Confirm and OneCode ACS, shall provide the list of Service Type Identifier values.</li><li>The Mailer or Customer Identifier shall be assigned by USPS as a unique, 6 or 9 digit number that identifies a business entity. The allowable encoding range for the 6 digit Mailer ID shall be 000000- 899999, while the allowable encoding range for the 9 digit Mailer ID shall be 900000000-999999999.</li><li>The Serial or Sequence Number shall be assigned by the mailer for uniquely identifying and tracking mailpieces. The allowable encoding range shall be 000000000–999999999 when used with a 6 digit Mailer ID and 000000-999999 when used with a 9 digit Mailer ID. e. The Delivery Point ZIP Code shall be assigned by the mailer for routing the mailpiece. This shall replace POSTNET for routing the mailpiece to its final delivery point. The length may be 0, 5, 9, or 11 digits. The allowable encoding ranges shall be no ZIP Code, 00000–99999,  000000000–999999999, and 00000000000–99999999999.</li></ul>
tcpdf/tcpdf_barcodes_1d.php:2054:	protected function barcode_imb($code) {
tcpdf/tcpdf_barcodes_1d.php:2179:	protected function barcode_imb_pre($code) {
tcpdf/tcpdf_barcodes_1d.php:2229:	public function dec_to_hex($number) {
tcpdf/tcpdf_barcodes_1d.php:2253:	public function hex_to_dec($hex) {
tcpdf/tcpdf_barcodes_1d.php:2270:	protected function imb_crc11fcs($code_arr) {
tcpdf/tcpdf_barcodes_1d.php:2306:	protected function imb_reverse_us($num) {
tcpdf/tcpdf_barcodes_1d.php:2323:	protected function imb_tables($n, $size) {
options-tab.txt:35:           'describe'  =>  name of, or pointer to, a function which will
